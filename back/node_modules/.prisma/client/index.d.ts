
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model clientes
 * 
 */
export type clientes = {
  codcliente: number
  codgrupo: number
  codhorarioatendimento: number | null
  cnpj_cpf: string | null
  datacadastro: Date | null
  OK: string | null
  razaosocial: string | null
  fantasia: string | null
  ipexterno: string | null
  dataatualizacaoip: Date | null
  bloqueado: string | null
  diasderenovacao: number | null
  vencimento: number | null
  checaratualizacao: string | null
  OBSERVACAO: string | null
  QTDMAXPC: number | null
  SITUACAO_CADASTRO: string | null
  EMAIL: string | null
  VERSAO: string | null
  PROMESSA_DE_PAGAMENTO: string | null
  DATA_INICIO_PROMESSA: Date | null
  DATA_LIMITE: Date | null
  TEMPOATENDIMENTO: string | null
  TIPOATENDIMENTO: string | null
  VersaoNFe: string | null
  VersaoNFCe: string | null
  SSLType: number | null
}

/**
 * Model clientesgrupo
 * 
 */
export type clientesgrupo = {
  codgrupo: number
  nomegrupo: string
}

/**
 * Model clienteshorarioatendimento
 * 
 */
export type clienteshorarioatendimento = {
  codatendimento: number
  dhinicio: string | null
  dhfim: string | null
}

/**
 * Model produto
 * 
 */
export type produto = {
  codproduto: number
  codgrupo: number | null
  codbarra: string | null
  descricao: string | null
  precovenda: number | null
  observacao: string | null
  nome: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clientes
 * const clientes = await prisma.clientes.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clientes
   * const clientes = await prisma.clientes.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.clientes`: Exposes CRUD operations for the **clientes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.clientes.findMany()
    * ```
    */
  get clientes(): Prisma.clientesDelegate<GlobalReject>;

  /**
   * `prisma.clientesgrupo`: Exposes CRUD operations for the **clientesgrupo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientesgrupos
    * const clientesgrupos = await prisma.clientesgrupo.findMany()
    * ```
    */
  get clientesgrupo(): Prisma.clientesgrupoDelegate<GlobalReject>;

  /**
   * `prisma.clienteshorarioatendimento`: Exposes CRUD operations for the **clienteshorarioatendimento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clienteshorarioatendimentos
    * const clienteshorarioatendimentos = await prisma.clienteshorarioatendimento.findMany()
    * ```
    */
  get clienteshorarioatendimento(): Prisma.clienteshorarioatendimentoDelegate<GlobalReject>;

  /**
   * `prisma.produto`: Exposes CRUD operations for the **produto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produto.findMany()
    * ```
    */
  get produto(): Prisma.produtoDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.0.0
   * Query Engine version: da41d2bb3406da22087b849f0e911199ba4fbf11
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    clientes: 'clientes',
    clientesgrupo: 'clientesgrupo',
    clienteshorarioatendimento: 'clienteshorarioatendimento',
    produto: 'produto'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClientesgrupoCountOutputType
   */


  export type ClientesgrupoCountOutputType = {
    clientes: number
  }

  export type ClientesgrupoCountOutputTypeSelect = {
    clientes?: boolean
  }

  export type ClientesgrupoCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ClientesgrupoCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ClientesgrupoCountOutputType
    : S extends undefined
    ? never
    : S extends ClientesgrupoCountOutputTypeArgs
    ?'include' extends U
    ? ClientesgrupoCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ClientesgrupoCountOutputType ? ClientesgrupoCountOutputType[P] : never
  } 
    : ClientesgrupoCountOutputType
  : ClientesgrupoCountOutputType




  // Custom InputTypes

  /**
   * ClientesgrupoCountOutputType without action
   */
  export type ClientesgrupoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ClientesgrupoCountOutputType
     * 
    **/
    select?: ClientesgrupoCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model clientes
   */


  export type AggregateClientes = {
    _count: ClientesCountAggregateOutputType | null
    _avg: ClientesAvgAggregateOutputType | null
    _sum: ClientesSumAggregateOutputType | null
    _min: ClientesMinAggregateOutputType | null
    _max: ClientesMaxAggregateOutputType | null
  }

  export type ClientesAvgAggregateOutputType = {
    codcliente: number | null
    codgrupo: number | null
    codhorarioatendimento: number | null
    diasderenovacao: number | null
    vencimento: number | null
    QTDMAXPC: number | null
    SSLType: number | null
  }

  export type ClientesSumAggregateOutputType = {
    codcliente: number | null
    codgrupo: number | null
    codhorarioatendimento: number | null
    diasderenovacao: number | null
    vencimento: number | null
    QTDMAXPC: number | null
    SSLType: number | null
  }

  export type ClientesMinAggregateOutputType = {
    codcliente: number | null
    codgrupo: number | null
    codhorarioatendimento: number | null
    cnpj_cpf: string | null
    datacadastro: Date | null
    OK: string | null
    razaosocial: string | null
    fantasia: string | null
    ipexterno: string | null
    dataatualizacaoip: Date | null
    bloqueado: string | null
    diasderenovacao: number | null
    vencimento: number | null
    checaratualizacao: string | null
    OBSERVACAO: string | null
    QTDMAXPC: number | null
    SITUACAO_CADASTRO: string | null
    EMAIL: string | null
    VERSAO: string | null
    PROMESSA_DE_PAGAMENTO: string | null
    DATA_INICIO_PROMESSA: Date | null
    DATA_LIMITE: Date | null
    TEMPOATENDIMENTO: string | null
    TIPOATENDIMENTO: string | null
    VersaoNFe: string | null
    VersaoNFCe: string | null
    SSLType: number | null
  }

  export type ClientesMaxAggregateOutputType = {
    codcliente: number | null
    codgrupo: number | null
    codhorarioatendimento: number | null
    cnpj_cpf: string | null
    datacadastro: Date | null
    OK: string | null
    razaosocial: string | null
    fantasia: string | null
    ipexterno: string | null
    dataatualizacaoip: Date | null
    bloqueado: string | null
    diasderenovacao: number | null
    vencimento: number | null
    checaratualizacao: string | null
    OBSERVACAO: string | null
    QTDMAXPC: number | null
    SITUACAO_CADASTRO: string | null
    EMAIL: string | null
    VERSAO: string | null
    PROMESSA_DE_PAGAMENTO: string | null
    DATA_INICIO_PROMESSA: Date | null
    DATA_LIMITE: Date | null
    TEMPOATENDIMENTO: string | null
    TIPOATENDIMENTO: string | null
    VersaoNFe: string | null
    VersaoNFCe: string | null
    SSLType: number | null
  }

  export type ClientesCountAggregateOutputType = {
    codcliente: number
    codgrupo: number
    codhorarioatendimento: number
    cnpj_cpf: number
    datacadastro: number
    OK: number
    razaosocial: number
    fantasia: number
    ipexterno: number
    dataatualizacaoip: number
    bloqueado: number
    diasderenovacao: number
    vencimento: number
    checaratualizacao: number
    OBSERVACAO: number
    QTDMAXPC: number
    SITUACAO_CADASTRO: number
    EMAIL: number
    VERSAO: number
    PROMESSA_DE_PAGAMENTO: number
    DATA_INICIO_PROMESSA: number
    DATA_LIMITE: number
    TEMPOATENDIMENTO: number
    TIPOATENDIMENTO: number
    VersaoNFe: number
    VersaoNFCe: number
    SSLType: number
    _all: number
  }


  export type ClientesAvgAggregateInputType = {
    codcliente?: true
    codgrupo?: true
    codhorarioatendimento?: true
    diasderenovacao?: true
    vencimento?: true
    QTDMAXPC?: true
    SSLType?: true
  }

  export type ClientesSumAggregateInputType = {
    codcliente?: true
    codgrupo?: true
    codhorarioatendimento?: true
    diasderenovacao?: true
    vencimento?: true
    QTDMAXPC?: true
    SSLType?: true
  }

  export type ClientesMinAggregateInputType = {
    codcliente?: true
    codgrupo?: true
    codhorarioatendimento?: true
    cnpj_cpf?: true
    datacadastro?: true
    OK?: true
    razaosocial?: true
    fantasia?: true
    ipexterno?: true
    dataatualizacaoip?: true
    bloqueado?: true
    diasderenovacao?: true
    vencimento?: true
    checaratualizacao?: true
    OBSERVACAO?: true
    QTDMAXPC?: true
    SITUACAO_CADASTRO?: true
    EMAIL?: true
    VERSAO?: true
    PROMESSA_DE_PAGAMENTO?: true
    DATA_INICIO_PROMESSA?: true
    DATA_LIMITE?: true
    TEMPOATENDIMENTO?: true
    TIPOATENDIMENTO?: true
    VersaoNFe?: true
    VersaoNFCe?: true
    SSLType?: true
  }

  export type ClientesMaxAggregateInputType = {
    codcliente?: true
    codgrupo?: true
    codhorarioatendimento?: true
    cnpj_cpf?: true
    datacadastro?: true
    OK?: true
    razaosocial?: true
    fantasia?: true
    ipexterno?: true
    dataatualizacaoip?: true
    bloqueado?: true
    diasderenovacao?: true
    vencimento?: true
    checaratualizacao?: true
    OBSERVACAO?: true
    QTDMAXPC?: true
    SITUACAO_CADASTRO?: true
    EMAIL?: true
    VERSAO?: true
    PROMESSA_DE_PAGAMENTO?: true
    DATA_INICIO_PROMESSA?: true
    DATA_LIMITE?: true
    TEMPOATENDIMENTO?: true
    TIPOATENDIMENTO?: true
    VersaoNFe?: true
    VersaoNFCe?: true
    SSLType?: true
  }

  export type ClientesCountAggregateInputType = {
    codcliente?: true
    codgrupo?: true
    codhorarioatendimento?: true
    cnpj_cpf?: true
    datacadastro?: true
    OK?: true
    razaosocial?: true
    fantasia?: true
    ipexterno?: true
    dataatualizacaoip?: true
    bloqueado?: true
    diasderenovacao?: true
    vencimento?: true
    checaratualizacao?: true
    OBSERVACAO?: true
    QTDMAXPC?: true
    SITUACAO_CADASTRO?: true
    EMAIL?: true
    VERSAO?: true
    PROMESSA_DE_PAGAMENTO?: true
    DATA_INICIO_PROMESSA?: true
    DATA_LIMITE?: true
    TEMPOATENDIMENTO?: true
    TIPOATENDIMENTO?: true
    VersaoNFe?: true
    VersaoNFCe?: true
    SSLType?: true
    _all?: true
  }

  export type ClientesAggregateArgs = {
    /**
     * Filter which clientes to aggregate.
     * 
    **/
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<clientesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clientes
    **/
    _count?: true | ClientesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientesMaxAggregateInputType
  }

  export type GetClientesAggregateType<T extends ClientesAggregateArgs> = {
        [P in keyof T & keyof AggregateClientes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientes[P]>
      : GetScalarType<T[P], AggregateClientes[P]>
  }




  export type ClientesGroupByArgs = {
    where?: clientesWhereInput
    orderBy?: Enumerable<clientesOrderByWithAggregationInput>
    by: Array<ClientesScalarFieldEnum>
    having?: clientesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientesCountAggregateInputType | true
    _avg?: ClientesAvgAggregateInputType
    _sum?: ClientesSumAggregateInputType
    _min?: ClientesMinAggregateInputType
    _max?: ClientesMaxAggregateInputType
  }


  export type ClientesGroupByOutputType = {
    codcliente: number
    codgrupo: number
    codhorarioatendimento: number | null
    cnpj_cpf: string | null
    datacadastro: Date | null
    OK: string | null
    razaosocial: string | null
    fantasia: string | null
    ipexterno: string | null
    dataatualizacaoip: Date | null
    bloqueado: string | null
    diasderenovacao: number | null
    vencimento: number | null
    checaratualizacao: string | null
    OBSERVACAO: string | null
    QTDMAXPC: number | null
    SITUACAO_CADASTRO: string | null
    EMAIL: string | null
    VERSAO: string | null
    PROMESSA_DE_PAGAMENTO: string | null
    DATA_INICIO_PROMESSA: Date | null
    DATA_LIMITE: Date | null
    TEMPOATENDIMENTO: string | null
    TIPOATENDIMENTO: string | null
    VersaoNFe: string | null
    VersaoNFCe: string | null
    SSLType: number | null
    _count: ClientesCountAggregateOutputType | null
    _avg: ClientesAvgAggregateOutputType | null
    _sum: ClientesSumAggregateOutputType | null
    _min: ClientesMinAggregateOutputType | null
    _max: ClientesMaxAggregateOutputType | null
  }

  type GetClientesGroupByPayload<T extends ClientesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ClientesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientesGroupByOutputType[P]>
            : GetScalarType<T[P], ClientesGroupByOutputType[P]>
        }
      >
    >


  export type clientesSelect = {
    codcliente?: boolean
    codgrupo?: boolean
    grupo?: boolean | clientesgrupoArgs
    codhorarioatendimento?: boolean
    cnpj_cpf?: boolean
    datacadastro?: boolean
    OK?: boolean
    razaosocial?: boolean
    fantasia?: boolean
    ipexterno?: boolean
    dataatualizacaoip?: boolean
    bloqueado?: boolean
    diasderenovacao?: boolean
    vencimento?: boolean
    checaratualizacao?: boolean
    OBSERVACAO?: boolean
    QTDMAXPC?: boolean
    SITUACAO_CADASTRO?: boolean
    EMAIL?: boolean
    VERSAO?: boolean
    PROMESSA_DE_PAGAMENTO?: boolean
    DATA_INICIO_PROMESSA?: boolean
    DATA_LIMITE?: boolean
    TEMPOATENDIMENTO?: boolean
    TIPOATENDIMENTO?: boolean
    VersaoNFe?: boolean
    VersaoNFCe?: boolean
    SSLType?: boolean
  }

  export type clientesInclude = {
    grupo?: boolean | clientesgrupoArgs
  }

  export type clientesGetPayload<
    S extends boolean | null | undefined | clientesArgs,
    U = keyof S
      > = S extends true
        ? clientes
    : S extends undefined
    ? never
    : S extends clientesArgs | clientesFindManyArgs
    ?'include' extends U
    ? clientes  & {
    [P in TrueKeys<S['include']>]:
        P extends 'grupo' ? clientesgrupoGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'grupo' ? clientesgrupoGetPayload<S['select'][P]> :  P extends keyof clientes ? clientes[P] : never
  } 
    : clientes
  : clientes


  type clientesCountArgs = Merge<
    Omit<clientesFindManyArgs, 'select' | 'include'> & {
      select?: ClientesCountAggregateInputType | true
    }
  >

  export interface clientesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Clientes that matches the filter.
     * @param {clientesFindUniqueArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends clientesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, clientesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'clientes'> extends True ? CheckSelect<T, Prisma__clientesClient<clientes>, Prisma__clientesClient<clientesGetPayload<T>>> : CheckSelect<T, Prisma__clientesClient<clientes | null >, Prisma__clientesClient<clientesGetPayload<T> | null >>

    /**
     * Find the first Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindFirstArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends clientesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, clientesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'clientes'> extends True ? CheckSelect<T, Prisma__clientesClient<clientes>, Prisma__clientesClient<clientesGetPayload<T>>> : CheckSelect<T, Prisma__clientesClient<clientes | null >, Prisma__clientesClient<clientesGetPayload<T> | null >>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.clientes.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.clientes.findMany({ take: 10 })
     * 
     * // Only select the `codcliente`
     * const clientesWithCodclienteOnly = await prisma.clientes.findMany({ select: { codcliente: true } })
     * 
    **/
    findMany<T extends clientesFindManyArgs>(
      args?: SelectSubset<T, clientesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<clientes>>, PrismaPromise<Array<clientesGetPayload<T>>>>

    /**
     * Create a Clientes.
     * @param {clientesCreateArgs} args - Arguments to create a Clientes.
     * @example
     * // Create one Clientes
     * const Clientes = await prisma.clientes.create({
     *   data: {
     *     // ... data to create a Clientes
     *   }
     * })
     * 
    **/
    create<T extends clientesCreateArgs>(
      args: SelectSubset<T, clientesCreateArgs>
    ): CheckSelect<T, Prisma__clientesClient<clientes>, Prisma__clientesClient<clientesGetPayload<T>>>

    /**
     * Create many Clientes.
     *     @param {clientesCreateManyArgs} args - Arguments to create many Clientes.
     *     @example
     *     // Create many Clientes
     *     const clientes = await prisma.clientes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends clientesCreateManyArgs>(
      args?: SelectSubset<T, clientesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Clientes.
     * @param {clientesDeleteArgs} args - Arguments to delete one Clientes.
     * @example
     * // Delete one Clientes
     * const Clientes = await prisma.clientes.delete({
     *   where: {
     *     // ... filter to delete one Clientes
     *   }
     * })
     * 
    **/
    delete<T extends clientesDeleteArgs>(
      args: SelectSubset<T, clientesDeleteArgs>
    ): CheckSelect<T, Prisma__clientesClient<clientes>, Prisma__clientesClient<clientesGetPayload<T>>>

    /**
     * Update one Clientes.
     * @param {clientesUpdateArgs} args - Arguments to update one Clientes.
     * @example
     * // Update one Clientes
     * const clientes = await prisma.clientes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends clientesUpdateArgs>(
      args: SelectSubset<T, clientesUpdateArgs>
    ): CheckSelect<T, Prisma__clientesClient<clientes>, Prisma__clientesClient<clientesGetPayload<T>>>

    /**
     * Delete zero or more Clientes.
     * @param {clientesDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.clientes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends clientesDeleteManyArgs>(
      args?: SelectSubset<T, clientesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const clientes = await prisma.clientes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends clientesUpdateManyArgs>(
      args: SelectSubset<T, clientesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Clientes.
     * @param {clientesUpsertArgs} args - Arguments to update or create a Clientes.
     * @example
     * // Update or create a Clientes
     * const clientes = await prisma.clientes.upsert({
     *   create: {
     *     // ... data to create a Clientes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clientes we want to update
     *   }
     * })
    **/
    upsert<T extends clientesUpsertArgs>(
      args: SelectSubset<T, clientesUpsertArgs>
    ): CheckSelect<T, Prisma__clientesClient<clientes>, Prisma__clientesClient<clientesGetPayload<T>>>

    /**
     * Find one Clientes that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {clientesFindUniqueOrThrowArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends clientesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, clientesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__clientesClient<clientes>, Prisma__clientesClient<clientesGetPayload<T>>>

    /**
     * Find the first Clientes that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesFindFirstOrThrowArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends clientesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, clientesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__clientesClient<clientes>, Prisma__clientesClient<clientesGetPayload<T>>>

    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.clientes.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends clientesCountArgs>(
      args?: Subset<T, clientesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientesAggregateArgs>(args: Subset<T, ClientesAggregateArgs>): PrismaPromise<GetClientesAggregateType<T>>

    /**
     * Group by Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientesGroupByArgs['orderBy'] }
        : { orderBy?: ClientesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for clientes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__clientesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    grupo<T extends clientesgrupoArgs = {}>(args?: Subset<T, clientesgrupoArgs>): CheckSelect<T, Prisma__clientesgrupoClient<clientesgrupo | null >, Prisma__clientesgrupoClient<clientesgrupoGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * clientes base type for findUnique actions
   */
  export type clientesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the clientes
     * 
    **/
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientesInclude | null
    /**
     * Filter, which clientes to fetch.
     * 
    **/
    where: clientesWhereUniqueInput
  }

  /**
   * clientes: findUnique
   */
  export interface clientesFindUniqueArgs extends clientesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * clientes base type for findFirst actions
   */
  export type clientesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the clientes
     * 
    **/
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientesInclude | null
    /**
     * Filter, which clientes to fetch.
     * 
    **/
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<clientesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientes.
     * 
    **/
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientes.
     * 
    **/
    distinct?: Enumerable<ClientesScalarFieldEnum>
  }

  /**
   * clientes: findFirst
   */
  export interface clientesFindFirstArgs extends clientesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * clientes findMany
   */
  export type clientesFindManyArgs = {
    /**
     * Select specific fields to fetch from the clientes
     * 
    **/
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientesInclude | null
    /**
     * Filter, which clientes to fetch.
     * 
    **/
    where?: clientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<clientesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clientes.
     * 
    **/
    cursor?: clientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ClientesScalarFieldEnum>
  }


  /**
   * clientes create
   */
  export type clientesCreateArgs = {
    /**
     * Select specific fields to fetch from the clientes
     * 
    **/
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientesInclude | null
    /**
     * The data needed to create a clientes.
     * 
    **/
    data: XOR<clientesCreateInput, clientesUncheckedCreateInput>
  }


  /**
   * clientes createMany
   */
  export type clientesCreateManyArgs = {
    /**
     * The data used to create many clientes.
     * 
    **/
    data: Enumerable<clientesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * clientes update
   */
  export type clientesUpdateArgs = {
    /**
     * Select specific fields to fetch from the clientes
     * 
    **/
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientesInclude | null
    /**
     * The data needed to update a clientes.
     * 
    **/
    data: XOR<clientesUpdateInput, clientesUncheckedUpdateInput>
    /**
     * Choose, which clientes to update.
     * 
    **/
    where: clientesWhereUniqueInput
  }


  /**
   * clientes updateMany
   */
  export type clientesUpdateManyArgs = {
    /**
     * The data used to update clientes.
     * 
    **/
    data: XOR<clientesUpdateManyMutationInput, clientesUncheckedUpdateManyInput>
    /**
     * Filter which clientes to update
     * 
    **/
    where?: clientesWhereInput
  }


  /**
   * clientes upsert
   */
  export type clientesUpsertArgs = {
    /**
     * Select specific fields to fetch from the clientes
     * 
    **/
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientesInclude | null
    /**
     * The filter to search for the clientes to update in case it exists.
     * 
    **/
    where: clientesWhereUniqueInput
    /**
     * In case the clientes found by the `where` argument doesn't exist, create a new clientes with this data.
     * 
    **/
    create: XOR<clientesCreateInput, clientesUncheckedCreateInput>
    /**
     * In case the clientes was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<clientesUpdateInput, clientesUncheckedUpdateInput>
  }


  /**
   * clientes delete
   */
  export type clientesDeleteArgs = {
    /**
     * Select specific fields to fetch from the clientes
     * 
    **/
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientesInclude | null
    /**
     * Filter which clientes to delete.
     * 
    **/
    where: clientesWhereUniqueInput
  }


  /**
   * clientes deleteMany
   */
  export type clientesDeleteManyArgs = {
    /**
     * Filter which clientes to delete
     * 
    **/
    where?: clientesWhereInput
  }


  /**
   * clientes: findUniqueOrThrow
   */
  export type clientesFindUniqueOrThrowArgs = clientesFindUniqueArgsBase
      

  /**
   * clientes: findFirstOrThrow
   */
  export type clientesFindFirstOrThrowArgs = clientesFindFirstArgsBase
      

  /**
   * clientes without action
   */
  export type clientesArgs = {
    /**
     * Select specific fields to fetch from the clientes
     * 
    **/
    select?: clientesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientesInclude | null
  }



  /**
   * Model clientesgrupo
   */


  export type AggregateClientesgrupo = {
    _count: ClientesgrupoCountAggregateOutputType | null
    _avg: ClientesgrupoAvgAggregateOutputType | null
    _sum: ClientesgrupoSumAggregateOutputType | null
    _min: ClientesgrupoMinAggregateOutputType | null
    _max: ClientesgrupoMaxAggregateOutputType | null
  }

  export type ClientesgrupoAvgAggregateOutputType = {
    codgrupo: number | null
  }

  export type ClientesgrupoSumAggregateOutputType = {
    codgrupo: number | null
  }

  export type ClientesgrupoMinAggregateOutputType = {
    codgrupo: number | null
    nomegrupo: string | null
  }

  export type ClientesgrupoMaxAggregateOutputType = {
    codgrupo: number | null
    nomegrupo: string | null
  }

  export type ClientesgrupoCountAggregateOutputType = {
    codgrupo: number
    nomegrupo: number
    _all: number
  }


  export type ClientesgrupoAvgAggregateInputType = {
    codgrupo?: true
  }

  export type ClientesgrupoSumAggregateInputType = {
    codgrupo?: true
  }

  export type ClientesgrupoMinAggregateInputType = {
    codgrupo?: true
    nomegrupo?: true
  }

  export type ClientesgrupoMaxAggregateInputType = {
    codgrupo?: true
    nomegrupo?: true
  }

  export type ClientesgrupoCountAggregateInputType = {
    codgrupo?: true
    nomegrupo?: true
    _all?: true
  }

  export type ClientesgrupoAggregateArgs = {
    /**
     * Filter which clientesgrupo to aggregate.
     * 
    **/
    where?: clientesgrupoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientesgrupos to fetch.
     * 
    **/
    orderBy?: Enumerable<clientesgrupoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: clientesgrupoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientesgrupos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientesgrupos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clientesgrupos
    **/
    _count?: true | ClientesgrupoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientesgrupoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientesgrupoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientesgrupoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientesgrupoMaxAggregateInputType
  }

  export type GetClientesgrupoAggregateType<T extends ClientesgrupoAggregateArgs> = {
        [P in keyof T & keyof AggregateClientesgrupo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientesgrupo[P]>
      : GetScalarType<T[P], AggregateClientesgrupo[P]>
  }




  export type ClientesgrupoGroupByArgs = {
    where?: clientesgrupoWhereInput
    orderBy?: Enumerable<clientesgrupoOrderByWithAggregationInput>
    by: Array<ClientesgrupoScalarFieldEnum>
    having?: clientesgrupoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientesgrupoCountAggregateInputType | true
    _avg?: ClientesgrupoAvgAggregateInputType
    _sum?: ClientesgrupoSumAggregateInputType
    _min?: ClientesgrupoMinAggregateInputType
    _max?: ClientesgrupoMaxAggregateInputType
  }


  export type ClientesgrupoGroupByOutputType = {
    codgrupo: number
    nomegrupo: string
    _count: ClientesgrupoCountAggregateOutputType | null
    _avg: ClientesgrupoAvgAggregateOutputType | null
    _sum: ClientesgrupoSumAggregateOutputType | null
    _min: ClientesgrupoMinAggregateOutputType | null
    _max: ClientesgrupoMaxAggregateOutputType | null
  }

  type GetClientesgrupoGroupByPayload<T extends ClientesgrupoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ClientesgrupoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientesgrupoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientesgrupoGroupByOutputType[P]>
            : GetScalarType<T[P], ClientesgrupoGroupByOutputType[P]>
        }
      >
    >


  export type clientesgrupoSelect = {
    codgrupo?: boolean
    nomegrupo?: boolean
    clientes?: boolean | clientesFindManyArgs
    _count?: boolean | ClientesgrupoCountOutputTypeArgs
  }

  export type clientesgrupoInclude = {
    clientes?: boolean | clientesFindManyArgs
    _count?: boolean | ClientesgrupoCountOutputTypeArgs
  }

  export type clientesgrupoGetPayload<
    S extends boolean | null | undefined | clientesgrupoArgs,
    U = keyof S
      > = S extends true
        ? clientesgrupo
    : S extends undefined
    ? never
    : S extends clientesgrupoArgs | clientesgrupoFindManyArgs
    ?'include' extends U
    ? clientesgrupo  & {
    [P in TrueKeys<S['include']>]:
        P extends 'clientes' ? Array < clientesGetPayload<S['include'][P]>>  :
        P extends '_count' ? ClientesgrupoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'clientes' ? Array < clientesGetPayload<S['select'][P]>>  :
        P extends '_count' ? ClientesgrupoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof clientesgrupo ? clientesgrupo[P] : never
  } 
    : clientesgrupo
  : clientesgrupo


  type clientesgrupoCountArgs = Merge<
    Omit<clientesgrupoFindManyArgs, 'select' | 'include'> & {
      select?: ClientesgrupoCountAggregateInputType | true
    }
  >

  export interface clientesgrupoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Clientesgrupo that matches the filter.
     * @param {clientesgrupoFindUniqueArgs} args - Arguments to find a Clientesgrupo
     * @example
     * // Get one Clientesgrupo
     * const clientesgrupo = await prisma.clientesgrupo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends clientesgrupoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, clientesgrupoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'clientesgrupo'> extends True ? CheckSelect<T, Prisma__clientesgrupoClient<clientesgrupo>, Prisma__clientesgrupoClient<clientesgrupoGetPayload<T>>> : CheckSelect<T, Prisma__clientesgrupoClient<clientesgrupo | null >, Prisma__clientesgrupoClient<clientesgrupoGetPayload<T> | null >>

    /**
     * Find the first Clientesgrupo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesgrupoFindFirstArgs} args - Arguments to find a Clientesgrupo
     * @example
     * // Get one Clientesgrupo
     * const clientesgrupo = await prisma.clientesgrupo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends clientesgrupoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, clientesgrupoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'clientesgrupo'> extends True ? CheckSelect<T, Prisma__clientesgrupoClient<clientesgrupo>, Prisma__clientesgrupoClient<clientesgrupoGetPayload<T>>> : CheckSelect<T, Prisma__clientesgrupoClient<clientesgrupo | null >, Prisma__clientesgrupoClient<clientesgrupoGetPayload<T> | null >>

    /**
     * Find zero or more Clientesgrupos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesgrupoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientesgrupos
     * const clientesgrupos = await prisma.clientesgrupo.findMany()
     * 
     * // Get first 10 Clientesgrupos
     * const clientesgrupos = await prisma.clientesgrupo.findMany({ take: 10 })
     * 
     * // Only select the `codgrupo`
     * const clientesgrupoWithCodgrupoOnly = await prisma.clientesgrupo.findMany({ select: { codgrupo: true } })
     * 
    **/
    findMany<T extends clientesgrupoFindManyArgs>(
      args?: SelectSubset<T, clientesgrupoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<clientesgrupo>>, PrismaPromise<Array<clientesgrupoGetPayload<T>>>>

    /**
     * Create a Clientesgrupo.
     * @param {clientesgrupoCreateArgs} args - Arguments to create a Clientesgrupo.
     * @example
     * // Create one Clientesgrupo
     * const Clientesgrupo = await prisma.clientesgrupo.create({
     *   data: {
     *     // ... data to create a Clientesgrupo
     *   }
     * })
     * 
    **/
    create<T extends clientesgrupoCreateArgs>(
      args: SelectSubset<T, clientesgrupoCreateArgs>
    ): CheckSelect<T, Prisma__clientesgrupoClient<clientesgrupo>, Prisma__clientesgrupoClient<clientesgrupoGetPayload<T>>>

    /**
     * Create many Clientesgrupos.
     *     @param {clientesgrupoCreateManyArgs} args - Arguments to create many Clientesgrupos.
     *     @example
     *     // Create many Clientesgrupos
     *     const clientesgrupo = await prisma.clientesgrupo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends clientesgrupoCreateManyArgs>(
      args?: SelectSubset<T, clientesgrupoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Clientesgrupo.
     * @param {clientesgrupoDeleteArgs} args - Arguments to delete one Clientesgrupo.
     * @example
     * // Delete one Clientesgrupo
     * const Clientesgrupo = await prisma.clientesgrupo.delete({
     *   where: {
     *     // ... filter to delete one Clientesgrupo
     *   }
     * })
     * 
    **/
    delete<T extends clientesgrupoDeleteArgs>(
      args: SelectSubset<T, clientesgrupoDeleteArgs>
    ): CheckSelect<T, Prisma__clientesgrupoClient<clientesgrupo>, Prisma__clientesgrupoClient<clientesgrupoGetPayload<T>>>

    /**
     * Update one Clientesgrupo.
     * @param {clientesgrupoUpdateArgs} args - Arguments to update one Clientesgrupo.
     * @example
     * // Update one Clientesgrupo
     * const clientesgrupo = await prisma.clientesgrupo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends clientesgrupoUpdateArgs>(
      args: SelectSubset<T, clientesgrupoUpdateArgs>
    ): CheckSelect<T, Prisma__clientesgrupoClient<clientesgrupo>, Prisma__clientesgrupoClient<clientesgrupoGetPayload<T>>>

    /**
     * Delete zero or more Clientesgrupos.
     * @param {clientesgrupoDeleteManyArgs} args - Arguments to filter Clientesgrupos to delete.
     * @example
     * // Delete a few Clientesgrupos
     * const { count } = await prisma.clientesgrupo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends clientesgrupoDeleteManyArgs>(
      args?: SelectSubset<T, clientesgrupoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientesgrupos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesgrupoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientesgrupos
     * const clientesgrupo = await prisma.clientesgrupo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends clientesgrupoUpdateManyArgs>(
      args: SelectSubset<T, clientesgrupoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Clientesgrupo.
     * @param {clientesgrupoUpsertArgs} args - Arguments to update or create a Clientesgrupo.
     * @example
     * // Update or create a Clientesgrupo
     * const clientesgrupo = await prisma.clientesgrupo.upsert({
     *   create: {
     *     // ... data to create a Clientesgrupo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clientesgrupo we want to update
     *   }
     * })
    **/
    upsert<T extends clientesgrupoUpsertArgs>(
      args: SelectSubset<T, clientesgrupoUpsertArgs>
    ): CheckSelect<T, Prisma__clientesgrupoClient<clientesgrupo>, Prisma__clientesgrupoClient<clientesgrupoGetPayload<T>>>

    /**
     * Find one Clientesgrupo that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {clientesgrupoFindUniqueOrThrowArgs} args - Arguments to find a Clientesgrupo
     * @example
     * // Get one Clientesgrupo
     * const clientesgrupo = await prisma.clientesgrupo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends clientesgrupoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, clientesgrupoFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__clientesgrupoClient<clientesgrupo>, Prisma__clientesgrupoClient<clientesgrupoGetPayload<T>>>

    /**
     * Find the first Clientesgrupo that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesgrupoFindFirstOrThrowArgs} args - Arguments to find a Clientesgrupo
     * @example
     * // Get one Clientesgrupo
     * const clientesgrupo = await prisma.clientesgrupo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends clientesgrupoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, clientesgrupoFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__clientesgrupoClient<clientesgrupo>, Prisma__clientesgrupoClient<clientesgrupoGetPayload<T>>>

    /**
     * Count the number of Clientesgrupos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientesgrupoCountArgs} args - Arguments to filter Clientesgrupos to count.
     * @example
     * // Count the number of Clientesgrupos
     * const count = await prisma.clientesgrupo.count({
     *   where: {
     *     // ... the filter for the Clientesgrupos we want to count
     *   }
     * })
    **/
    count<T extends clientesgrupoCountArgs>(
      args?: Subset<T, clientesgrupoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientesgrupoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clientesgrupo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesgrupoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientesgrupoAggregateArgs>(args: Subset<T, ClientesgrupoAggregateArgs>): PrismaPromise<GetClientesgrupoAggregateType<T>>

    /**
     * Group by Clientesgrupo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesgrupoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientesgrupoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientesgrupoGroupByArgs['orderBy'] }
        : { orderBy?: ClientesgrupoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientesgrupoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientesgrupoGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for clientesgrupo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__clientesgrupoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    clientes<T extends clientesFindManyArgs = {}>(args?: Subset<T, clientesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<clientes>>, PrismaPromise<Array<clientesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * clientesgrupo base type for findUnique actions
   */
  export type clientesgrupoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the clientesgrupo
     * 
    **/
    select?: clientesgrupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientesgrupoInclude | null
    /**
     * Filter, which clientesgrupo to fetch.
     * 
    **/
    where: clientesgrupoWhereUniqueInput
  }

  /**
   * clientesgrupo: findUnique
   */
  export interface clientesgrupoFindUniqueArgs extends clientesgrupoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * clientesgrupo base type for findFirst actions
   */
  export type clientesgrupoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the clientesgrupo
     * 
    **/
    select?: clientesgrupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientesgrupoInclude | null
    /**
     * Filter, which clientesgrupo to fetch.
     * 
    **/
    where?: clientesgrupoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientesgrupos to fetch.
     * 
    **/
    orderBy?: Enumerable<clientesgrupoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientesgrupos.
     * 
    **/
    cursor?: clientesgrupoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientesgrupos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientesgrupos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientesgrupos.
     * 
    **/
    distinct?: Enumerable<ClientesgrupoScalarFieldEnum>
  }

  /**
   * clientesgrupo: findFirst
   */
  export interface clientesgrupoFindFirstArgs extends clientesgrupoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * clientesgrupo findMany
   */
  export type clientesgrupoFindManyArgs = {
    /**
     * Select specific fields to fetch from the clientesgrupo
     * 
    **/
    select?: clientesgrupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientesgrupoInclude | null
    /**
     * Filter, which clientesgrupos to fetch.
     * 
    **/
    where?: clientesgrupoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientesgrupos to fetch.
     * 
    **/
    orderBy?: Enumerable<clientesgrupoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clientesgrupos.
     * 
    **/
    cursor?: clientesgrupoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientesgrupos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientesgrupos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ClientesgrupoScalarFieldEnum>
  }


  /**
   * clientesgrupo create
   */
  export type clientesgrupoCreateArgs = {
    /**
     * Select specific fields to fetch from the clientesgrupo
     * 
    **/
    select?: clientesgrupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientesgrupoInclude | null
    /**
     * The data needed to create a clientesgrupo.
     * 
    **/
    data: XOR<clientesgrupoCreateInput, clientesgrupoUncheckedCreateInput>
  }


  /**
   * clientesgrupo createMany
   */
  export type clientesgrupoCreateManyArgs = {
    /**
     * The data used to create many clientesgrupos.
     * 
    **/
    data: Enumerable<clientesgrupoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * clientesgrupo update
   */
  export type clientesgrupoUpdateArgs = {
    /**
     * Select specific fields to fetch from the clientesgrupo
     * 
    **/
    select?: clientesgrupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientesgrupoInclude | null
    /**
     * The data needed to update a clientesgrupo.
     * 
    **/
    data: XOR<clientesgrupoUpdateInput, clientesgrupoUncheckedUpdateInput>
    /**
     * Choose, which clientesgrupo to update.
     * 
    **/
    where: clientesgrupoWhereUniqueInput
  }


  /**
   * clientesgrupo updateMany
   */
  export type clientesgrupoUpdateManyArgs = {
    /**
     * The data used to update clientesgrupos.
     * 
    **/
    data: XOR<clientesgrupoUpdateManyMutationInput, clientesgrupoUncheckedUpdateManyInput>
    /**
     * Filter which clientesgrupos to update
     * 
    **/
    where?: clientesgrupoWhereInput
  }


  /**
   * clientesgrupo upsert
   */
  export type clientesgrupoUpsertArgs = {
    /**
     * Select specific fields to fetch from the clientesgrupo
     * 
    **/
    select?: clientesgrupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientesgrupoInclude | null
    /**
     * The filter to search for the clientesgrupo to update in case it exists.
     * 
    **/
    where: clientesgrupoWhereUniqueInput
    /**
     * In case the clientesgrupo found by the `where` argument doesn't exist, create a new clientesgrupo with this data.
     * 
    **/
    create: XOR<clientesgrupoCreateInput, clientesgrupoUncheckedCreateInput>
    /**
     * In case the clientesgrupo was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<clientesgrupoUpdateInput, clientesgrupoUncheckedUpdateInput>
  }


  /**
   * clientesgrupo delete
   */
  export type clientesgrupoDeleteArgs = {
    /**
     * Select specific fields to fetch from the clientesgrupo
     * 
    **/
    select?: clientesgrupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientesgrupoInclude | null
    /**
     * Filter which clientesgrupo to delete.
     * 
    **/
    where: clientesgrupoWhereUniqueInput
  }


  /**
   * clientesgrupo deleteMany
   */
  export type clientesgrupoDeleteManyArgs = {
    /**
     * Filter which clientesgrupos to delete
     * 
    **/
    where?: clientesgrupoWhereInput
  }


  /**
   * clientesgrupo: findUniqueOrThrow
   */
  export type clientesgrupoFindUniqueOrThrowArgs = clientesgrupoFindUniqueArgsBase
      

  /**
   * clientesgrupo: findFirstOrThrow
   */
  export type clientesgrupoFindFirstOrThrowArgs = clientesgrupoFindFirstArgsBase
      

  /**
   * clientesgrupo without action
   */
  export type clientesgrupoArgs = {
    /**
     * Select specific fields to fetch from the clientesgrupo
     * 
    **/
    select?: clientesgrupoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: clientesgrupoInclude | null
  }



  /**
   * Model clienteshorarioatendimento
   */


  export type AggregateClienteshorarioatendimento = {
    _count: ClienteshorarioatendimentoCountAggregateOutputType | null
    _avg: ClienteshorarioatendimentoAvgAggregateOutputType | null
    _sum: ClienteshorarioatendimentoSumAggregateOutputType | null
    _min: ClienteshorarioatendimentoMinAggregateOutputType | null
    _max: ClienteshorarioatendimentoMaxAggregateOutputType | null
  }

  export type ClienteshorarioatendimentoAvgAggregateOutputType = {
    codatendimento: number | null
  }

  export type ClienteshorarioatendimentoSumAggregateOutputType = {
    codatendimento: number | null
  }

  export type ClienteshorarioatendimentoMinAggregateOutputType = {
    codatendimento: number | null
    dhinicio: string | null
    dhfim: string | null
  }

  export type ClienteshorarioatendimentoMaxAggregateOutputType = {
    codatendimento: number | null
    dhinicio: string | null
    dhfim: string | null
  }

  export type ClienteshorarioatendimentoCountAggregateOutputType = {
    codatendimento: number
    dhinicio: number
    dhfim: number
    _all: number
  }


  export type ClienteshorarioatendimentoAvgAggregateInputType = {
    codatendimento?: true
  }

  export type ClienteshorarioatendimentoSumAggregateInputType = {
    codatendimento?: true
  }

  export type ClienteshorarioatendimentoMinAggregateInputType = {
    codatendimento?: true
    dhinicio?: true
    dhfim?: true
  }

  export type ClienteshorarioatendimentoMaxAggregateInputType = {
    codatendimento?: true
    dhinicio?: true
    dhfim?: true
  }

  export type ClienteshorarioatendimentoCountAggregateInputType = {
    codatendimento?: true
    dhinicio?: true
    dhfim?: true
    _all?: true
  }

  export type ClienteshorarioatendimentoAggregateArgs = {
    /**
     * Filter which clienteshorarioatendimento to aggregate.
     * 
    **/
    where?: clienteshorarioatendimentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clienteshorarioatendimentos to fetch.
     * 
    **/
    orderBy?: Enumerable<clienteshorarioatendimentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: clienteshorarioatendimentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clienteshorarioatendimentos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clienteshorarioatendimentos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clienteshorarioatendimentos
    **/
    _count?: true | ClienteshorarioatendimentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteshorarioatendimentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteshorarioatendimentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteshorarioatendimentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteshorarioatendimentoMaxAggregateInputType
  }

  export type GetClienteshorarioatendimentoAggregateType<T extends ClienteshorarioatendimentoAggregateArgs> = {
        [P in keyof T & keyof AggregateClienteshorarioatendimento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClienteshorarioatendimento[P]>
      : GetScalarType<T[P], AggregateClienteshorarioatendimento[P]>
  }




  export type ClienteshorarioatendimentoGroupByArgs = {
    where?: clienteshorarioatendimentoWhereInput
    orderBy?: Enumerable<clienteshorarioatendimentoOrderByWithAggregationInput>
    by: Array<ClienteshorarioatendimentoScalarFieldEnum>
    having?: clienteshorarioatendimentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteshorarioatendimentoCountAggregateInputType | true
    _avg?: ClienteshorarioatendimentoAvgAggregateInputType
    _sum?: ClienteshorarioatendimentoSumAggregateInputType
    _min?: ClienteshorarioatendimentoMinAggregateInputType
    _max?: ClienteshorarioatendimentoMaxAggregateInputType
  }


  export type ClienteshorarioatendimentoGroupByOutputType = {
    codatendimento: number
    dhinicio: string | null
    dhfim: string | null
    _count: ClienteshorarioatendimentoCountAggregateOutputType | null
    _avg: ClienteshorarioatendimentoAvgAggregateOutputType | null
    _sum: ClienteshorarioatendimentoSumAggregateOutputType | null
    _min: ClienteshorarioatendimentoMinAggregateOutputType | null
    _max: ClienteshorarioatendimentoMaxAggregateOutputType | null
  }

  type GetClienteshorarioatendimentoGroupByPayload<T extends ClienteshorarioatendimentoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ClienteshorarioatendimentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteshorarioatendimentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteshorarioatendimentoGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteshorarioatendimentoGroupByOutputType[P]>
        }
      >
    >


  export type clienteshorarioatendimentoSelect = {
    codatendimento?: boolean
    dhinicio?: boolean
    dhfim?: boolean
  }

  export type clienteshorarioatendimentoGetPayload<
    S extends boolean | null | undefined | clienteshorarioatendimentoArgs,
    U = keyof S
      > = S extends true
        ? clienteshorarioatendimento
    : S extends undefined
    ? never
    : S extends clienteshorarioatendimentoArgs | clienteshorarioatendimentoFindManyArgs
    ?'include' extends U
    ? clienteshorarioatendimento 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof clienteshorarioatendimento ? clienteshorarioatendimento[P] : never
  } 
    : clienteshorarioatendimento
  : clienteshorarioatendimento


  type clienteshorarioatendimentoCountArgs = Merge<
    Omit<clienteshorarioatendimentoFindManyArgs, 'select' | 'include'> & {
      select?: ClienteshorarioatendimentoCountAggregateInputType | true
    }
  >

  export interface clienteshorarioatendimentoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Clienteshorarioatendimento that matches the filter.
     * @param {clienteshorarioatendimentoFindUniqueArgs} args - Arguments to find a Clienteshorarioatendimento
     * @example
     * // Get one Clienteshorarioatendimento
     * const clienteshorarioatendimento = await prisma.clienteshorarioatendimento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends clienteshorarioatendimentoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, clienteshorarioatendimentoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'clienteshorarioatendimento'> extends True ? CheckSelect<T, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimento>, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimentoGetPayload<T>>> : CheckSelect<T, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimento | null >, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimentoGetPayload<T> | null >>

    /**
     * Find the first Clienteshorarioatendimento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteshorarioatendimentoFindFirstArgs} args - Arguments to find a Clienteshorarioatendimento
     * @example
     * // Get one Clienteshorarioatendimento
     * const clienteshorarioatendimento = await prisma.clienteshorarioatendimento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends clienteshorarioatendimentoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, clienteshorarioatendimentoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'clienteshorarioatendimento'> extends True ? CheckSelect<T, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimento>, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimentoGetPayload<T>>> : CheckSelect<T, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimento | null >, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimentoGetPayload<T> | null >>

    /**
     * Find zero or more Clienteshorarioatendimentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteshorarioatendimentoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clienteshorarioatendimentos
     * const clienteshorarioatendimentos = await prisma.clienteshorarioatendimento.findMany()
     * 
     * // Get first 10 Clienteshorarioatendimentos
     * const clienteshorarioatendimentos = await prisma.clienteshorarioatendimento.findMany({ take: 10 })
     * 
     * // Only select the `codatendimento`
     * const clienteshorarioatendimentoWithCodatendimentoOnly = await prisma.clienteshorarioatendimento.findMany({ select: { codatendimento: true } })
     * 
    **/
    findMany<T extends clienteshorarioatendimentoFindManyArgs>(
      args?: SelectSubset<T, clienteshorarioatendimentoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<clienteshorarioatendimento>>, PrismaPromise<Array<clienteshorarioatendimentoGetPayload<T>>>>

    /**
     * Create a Clienteshorarioatendimento.
     * @param {clienteshorarioatendimentoCreateArgs} args - Arguments to create a Clienteshorarioatendimento.
     * @example
     * // Create one Clienteshorarioatendimento
     * const Clienteshorarioatendimento = await prisma.clienteshorarioatendimento.create({
     *   data: {
     *     // ... data to create a Clienteshorarioatendimento
     *   }
     * })
     * 
    **/
    create<T extends clienteshorarioatendimentoCreateArgs>(
      args: SelectSubset<T, clienteshorarioatendimentoCreateArgs>
    ): CheckSelect<T, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimento>, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimentoGetPayload<T>>>

    /**
     * Create many Clienteshorarioatendimentos.
     *     @param {clienteshorarioatendimentoCreateManyArgs} args - Arguments to create many Clienteshorarioatendimentos.
     *     @example
     *     // Create many Clienteshorarioatendimentos
     *     const clienteshorarioatendimento = await prisma.clienteshorarioatendimento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends clienteshorarioatendimentoCreateManyArgs>(
      args?: SelectSubset<T, clienteshorarioatendimentoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Clienteshorarioatendimento.
     * @param {clienteshorarioatendimentoDeleteArgs} args - Arguments to delete one Clienteshorarioatendimento.
     * @example
     * // Delete one Clienteshorarioatendimento
     * const Clienteshorarioatendimento = await prisma.clienteshorarioatendimento.delete({
     *   where: {
     *     // ... filter to delete one Clienteshorarioatendimento
     *   }
     * })
     * 
    **/
    delete<T extends clienteshorarioatendimentoDeleteArgs>(
      args: SelectSubset<T, clienteshorarioatendimentoDeleteArgs>
    ): CheckSelect<T, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimento>, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimentoGetPayload<T>>>

    /**
     * Update one Clienteshorarioatendimento.
     * @param {clienteshorarioatendimentoUpdateArgs} args - Arguments to update one Clienteshorarioatendimento.
     * @example
     * // Update one Clienteshorarioatendimento
     * const clienteshorarioatendimento = await prisma.clienteshorarioatendimento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends clienteshorarioatendimentoUpdateArgs>(
      args: SelectSubset<T, clienteshorarioatendimentoUpdateArgs>
    ): CheckSelect<T, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimento>, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimentoGetPayload<T>>>

    /**
     * Delete zero or more Clienteshorarioatendimentos.
     * @param {clienteshorarioatendimentoDeleteManyArgs} args - Arguments to filter Clienteshorarioatendimentos to delete.
     * @example
     * // Delete a few Clienteshorarioatendimentos
     * const { count } = await prisma.clienteshorarioatendimento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends clienteshorarioatendimentoDeleteManyArgs>(
      args?: SelectSubset<T, clienteshorarioatendimentoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clienteshorarioatendimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteshorarioatendimentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clienteshorarioatendimentos
     * const clienteshorarioatendimento = await prisma.clienteshorarioatendimento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends clienteshorarioatendimentoUpdateManyArgs>(
      args: SelectSubset<T, clienteshorarioatendimentoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Clienteshorarioatendimento.
     * @param {clienteshorarioatendimentoUpsertArgs} args - Arguments to update or create a Clienteshorarioatendimento.
     * @example
     * // Update or create a Clienteshorarioatendimento
     * const clienteshorarioatendimento = await prisma.clienteshorarioatendimento.upsert({
     *   create: {
     *     // ... data to create a Clienteshorarioatendimento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clienteshorarioatendimento we want to update
     *   }
     * })
    **/
    upsert<T extends clienteshorarioatendimentoUpsertArgs>(
      args: SelectSubset<T, clienteshorarioatendimentoUpsertArgs>
    ): CheckSelect<T, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimento>, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimentoGetPayload<T>>>

    /**
     * Find one Clienteshorarioatendimento that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {clienteshorarioatendimentoFindUniqueOrThrowArgs} args - Arguments to find a Clienteshorarioatendimento
     * @example
     * // Get one Clienteshorarioatendimento
     * const clienteshorarioatendimento = await prisma.clienteshorarioatendimento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends clienteshorarioatendimentoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, clienteshorarioatendimentoFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimento>, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimentoGetPayload<T>>>

    /**
     * Find the first Clienteshorarioatendimento that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteshorarioatendimentoFindFirstOrThrowArgs} args - Arguments to find a Clienteshorarioatendimento
     * @example
     * // Get one Clienteshorarioatendimento
     * const clienteshorarioatendimento = await prisma.clienteshorarioatendimento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends clienteshorarioatendimentoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, clienteshorarioatendimentoFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimento>, Prisma__clienteshorarioatendimentoClient<clienteshorarioatendimentoGetPayload<T>>>

    /**
     * Count the number of Clienteshorarioatendimentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clienteshorarioatendimentoCountArgs} args - Arguments to filter Clienteshorarioatendimentos to count.
     * @example
     * // Count the number of Clienteshorarioatendimentos
     * const count = await prisma.clienteshorarioatendimento.count({
     *   where: {
     *     // ... the filter for the Clienteshorarioatendimentos we want to count
     *   }
     * })
    **/
    count<T extends clienteshorarioatendimentoCountArgs>(
      args?: Subset<T, clienteshorarioatendimentoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteshorarioatendimentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clienteshorarioatendimento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteshorarioatendimentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteshorarioatendimentoAggregateArgs>(args: Subset<T, ClienteshorarioatendimentoAggregateArgs>): PrismaPromise<GetClienteshorarioatendimentoAggregateType<T>>

    /**
     * Group by Clienteshorarioatendimento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteshorarioatendimentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteshorarioatendimentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteshorarioatendimentoGroupByArgs['orderBy'] }
        : { orderBy?: ClienteshorarioatendimentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteshorarioatendimentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteshorarioatendimentoGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for clienteshorarioatendimento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__clienteshorarioatendimentoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * clienteshorarioatendimento base type for findUnique actions
   */
  export type clienteshorarioatendimentoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the clienteshorarioatendimento
     * 
    **/
    select?: clienteshorarioatendimentoSelect | null
    /**
     * Filter, which clienteshorarioatendimento to fetch.
     * 
    **/
    where: clienteshorarioatendimentoWhereUniqueInput
  }

  /**
   * clienteshorarioatendimento: findUnique
   */
  export interface clienteshorarioatendimentoFindUniqueArgs extends clienteshorarioatendimentoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * clienteshorarioatendimento base type for findFirst actions
   */
  export type clienteshorarioatendimentoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the clienteshorarioatendimento
     * 
    **/
    select?: clienteshorarioatendimentoSelect | null
    /**
     * Filter, which clienteshorarioatendimento to fetch.
     * 
    **/
    where?: clienteshorarioatendimentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clienteshorarioatendimentos to fetch.
     * 
    **/
    orderBy?: Enumerable<clienteshorarioatendimentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clienteshorarioatendimentos.
     * 
    **/
    cursor?: clienteshorarioatendimentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clienteshorarioatendimentos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clienteshorarioatendimentos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clienteshorarioatendimentos.
     * 
    **/
    distinct?: Enumerable<ClienteshorarioatendimentoScalarFieldEnum>
  }

  /**
   * clienteshorarioatendimento: findFirst
   */
  export interface clienteshorarioatendimentoFindFirstArgs extends clienteshorarioatendimentoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * clienteshorarioatendimento findMany
   */
  export type clienteshorarioatendimentoFindManyArgs = {
    /**
     * Select specific fields to fetch from the clienteshorarioatendimento
     * 
    **/
    select?: clienteshorarioatendimentoSelect | null
    /**
     * Filter, which clienteshorarioatendimentos to fetch.
     * 
    **/
    where?: clienteshorarioatendimentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clienteshorarioatendimentos to fetch.
     * 
    **/
    orderBy?: Enumerable<clienteshorarioatendimentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clienteshorarioatendimentos.
     * 
    **/
    cursor?: clienteshorarioatendimentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clienteshorarioatendimentos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clienteshorarioatendimentos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ClienteshorarioatendimentoScalarFieldEnum>
  }


  /**
   * clienteshorarioatendimento create
   */
  export type clienteshorarioatendimentoCreateArgs = {
    /**
     * Select specific fields to fetch from the clienteshorarioatendimento
     * 
    **/
    select?: clienteshorarioatendimentoSelect | null
    /**
     * The data needed to create a clienteshorarioatendimento.
     * 
    **/
    data: XOR<clienteshorarioatendimentoCreateInput, clienteshorarioatendimentoUncheckedCreateInput>
  }


  /**
   * clienteshorarioatendimento createMany
   */
  export type clienteshorarioatendimentoCreateManyArgs = {
    /**
     * The data used to create many clienteshorarioatendimentos.
     * 
    **/
    data: Enumerable<clienteshorarioatendimentoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * clienteshorarioatendimento update
   */
  export type clienteshorarioatendimentoUpdateArgs = {
    /**
     * Select specific fields to fetch from the clienteshorarioatendimento
     * 
    **/
    select?: clienteshorarioatendimentoSelect | null
    /**
     * The data needed to update a clienteshorarioatendimento.
     * 
    **/
    data: XOR<clienteshorarioatendimentoUpdateInput, clienteshorarioatendimentoUncheckedUpdateInput>
    /**
     * Choose, which clienteshorarioatendimento to update.
     * 
    **/
    where: clienteshorarioatendimentoWhereUniqueInput
  }


  /**
   * clienteshorarioatendimento updateMany
   */
  export type clienteshorarioatendimentoUpdateManyArgs = {
    /**
     * The data used to update clienteshorarioatendimentos.
     * 
    **/
    data: XOR<clienteshorarioatendimentoUpdateManyMutationInput, clienteshorarioatendimentoUncheckedUpdateManyInput>
    /**
     * Filter which clienteshorarioatendimentos to update
     * 
    **/
    where?: clienteshorarioatendimentoWhereInput
  }


  /**
   * clienteshorarioatendimento upsert
   */
  export type clienteshorarioatendimentoUpsertArgs = {
    /**
     * Select specific fields to fetch from the clienteshorarioatendimento
     * 
    **/
    select?: clienteshorarioatendimentoSelect | null
    /**
     * The filter to search for the clienteshorarioatendimento to update in case it exists.
     * 
    **/
    where: clienteshorarioatendimentoWhereUniqueInput
    /**
     * In case the clienteshorarioatendimento found by the `where` argument doesn't exist, create a new clienteshorarioatendimento with this data.
     * 
    **/
    create: XOR<clienteshorarioatendimentoCreateInput, clienteshorarioatendimentoUncheckedCreateInput>
    /**
     * In case the clienteshorarioatendimento was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<clienteshorarioatendimentoUpdateInput, clienteshorarioatendimentoUncheckedUpdateInput>
  }


  /**
   * clienteshorarioatendimento delete
   */
  export type clienteshorarioatendimentoDeleteArgs = {
    /**
     * Select specific fields to fetch from the clienteshorarioatendimento
     * 
    **/
    select?: clienteshorarioatendimentoSelect | null
    /**
     * Filter which clienteshorarioatendimento to delete.
     * 
    **/
    where: clienteshorarioatendimentoWhereUniqueInput
  }


  /**
   * clienteshorarioatendimento deleteMany
   */
  export type clienteshorarioatendimentoDeleteManyArgs = {
    /**
     * Filter which clienteshorarioatendimentos to delete
     * 
    **/
    where?: clienteshorarioatendimentoWhereInput
  }


  /**
   * clienteshorarioatendimento: findUniqueOrThrow
   */
  export type clienteshorarioatendimentoFindUniqueOrThrowArgs = clienteshorarioatendimentoFindUniqueArgsBase
      

  /**
   * clienteshorarioatendimento: findFirstOrThrow
   */
  export type clienteshorarioatendimentoFindFirstOrThrowArgs = clienteshorarioatendimentoFindFirstArgsBase
      

  /**
   * clienteshorarioatendimento without action
   */
  export type clienteshorarioatendimentoArgs = {
    /**
     * Select specific fields to fetch from the clienteshorarioatendimento
     * 
    **/
    select?: clienteshorarioatendimentoSelect | null
  }



  /**
   * Model produto
   */


  export type AggregateProduto = {
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  export type ProdutoAvgAggregateOutputType = {
    codproduto: number | null
    codgrupo: number | null
    precovenda: number | null
  }

  export type ProdutoSumAggregateOutputType = {
    codproduto: number | null
    codgrupo: number | null
    precovenda: number | null
  }

  export type ProdutoMinAggregateOutputType = {
    codproduto: number | null
    codgrupo: number | null
    codbarra: string | null
    descricao: string | null
    precovenda: number | null
    observacao: string | null
    nome: string | null
  }

  export type ProdutoMaxAggregateOutputType = {
    codproduto: number | null
    codgrupo: number | null
    codbarra: string | null
    descricao: string | null
    precovenda: number | null
    observacao: string | null
    nome: string | null
  }

  export type ProdutoCountAggregateOutputType = {
    codproduto: number
    codgrupo: number
    codbarra: number
    descricao: number
    precovenda: number
    observacao: number
    nome: number
    _all: number
  }


  export type ProdutoAvgAggregateInputType = {
    codproduto?: true
    codgrupo?: true
    precovenda?: true
  }

  export type ProdutoSumAggregateInputType = {
    codproduto?: true
    codgrupo?: true
    precovenda?: true
  }

  export type ProdutoMinAggregateInputType = {
    codproduto?: true
    codgrupo?: true
    codbarra?: true
    descricao?: true
    precovenda?: true
    observacao?: true
    nome?: true
  }

  export type ProdutoMaxAggregateInputType = {
    codproduto?: true
    codgrupo?: true
    codbarra?: true
    descricao?: true
    precovenda?: true
    observacao?: true
    nome?: true
  }

  export type ProdutoCountAggregateInputType = {
    codproduto?: true
    codgrupo?: true
    codbarra?: true
    descricao?: true
    precovenda?: true
    observacao?: true
    nome?: true
    _all?: true
  }

  export type ProdutoAggregateArgs = {
    /**
     * Filter which produto to aggregate.
     * 
    **/
    where?: produtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<produtoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: produtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned produtos
    **/
    _count?: true | ProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoMaxAggregateInputType
  }

  export type GetProdutoAggregateType<T extends ProdutoAggregateArgs> = {
        [P in keyof T & keyof AggregateProduto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduto[P]>
      : GetScalarType<T[P], AggregateProduto[P]>
  }




  export type ProdutoGroupByArgs = {
    where?: produtoWhereInput
    orderBy?: Enumerable<produtoOrderByWithAggregationInput>
    by: Array<ProdutoScalarFieldEnum>
    having?: produtoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoCountAggregateInputType | true
    _avg?: ProdutoAvgAggregateInputType
    _sum?: ProdutoSumAggregateInputType
    _min?: ProdutoMinAggregateInputType
    _max?: ProdutoMaxAggregateInputType
  }


  export type ProdutoGroupByOutputType = {
    codproduto: number
    codgrupo: number | null
    codbarra: string | null
    descricao: string | null
    precovenda: number | null
    observacao: string | null
    nome: string | null
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  type GetProdutoGroupByPayload<T extends ProdutoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProdutoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
        }
      >
    >


  export type produtoSelect = {
    codproduto?: boolean
    codgrupo?: boolean
    codbarra?: boolean
    descricao?: boolean
    precovenda?: boolean
    observacao?: boolean
    nome?: boolean
  }

  export type produtoGetPayload<
    S extends boolean | null | undefined | produtoArgs,
    U = keyof S
      > = S extends true
        ? produto
    : S extends undefined
    ? never
    : S extends produtoArgs | produtoFindManyArgs
    ?'include' extends U
    ? produto 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof produto ? produto[P] : never
  } 
    : produto
  : produto


  type produtoCountArgs = Merge<
    Omit<produtoFindManyArgs, 'select' | 'include'> & {
      select?: ProdutoCountAggregateInputType | true
    }
  >

  export interface produtoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Produto that matches the filter.
     * @param {produtoFindUniqueArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends produtoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, produtoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'produto'> extends True ? CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>> : CheckSelect<T, Prisma__produtoClient<produto | null >, Prisma__produtoClient<produtoGetPayload<T> | null >>

    /**
     * Find the first Produto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoFindFirstArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends produtoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, produtoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'produto'> extends True ? CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>> : CheckSelect<T, Prisma__produtoClient<produto | null >, Prisma__produtoClient<produtoGetPayload<T> | null >>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produto.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produto.findMany({ take: 10 })
     * 
     * // Only select the `codproduto`
     * const produtoWithCodprodutoOnly = await prisma.produto.findMany({ select: { codproduto: true } })
     * 
    **/
    findMany<T extends produtoFindManyArgs>(
      args?: SelectSubset<T, produtoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<produto>>, PrismaPromise<Array<produtoGetPayload<T>>>>

    /**
     * Create a Produto.
     * @param {produtoCreateArgs} args - Arguments to create a Produto.
     * @example
     * // Create one Produto
     * const Produto = await prisma.produto.create({
     *   data: {
     *     // ... data to create a Produto
     *   }
     * })
     * 
    **/
    create<T extends produtoCreateArgs>(
      args: SelectSubset<T, produtoCreateArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Create many Produtos.
     *     @param {produtoCreateManyArgs} args - Arguments to create many Produtos.
     *     @example
     *     // Create many Produtos
     *     const produto = await prisma.produto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends produtoCreateManyArgs>(
      args?: SelectSubset<T, produtoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Produto.
     * @param {produtoDeleteArgs} args - Arguments to delete one Produto.
     * @example
     * // Delete one Produto
     * const Produto = await prisma.produto.delete({
     *   where: {
     *     // ... filter to delete one Produto
     *   }
     * })
     * 
    **/
    delete<T extends produtoDeleteArgs>(
      args: SelectSubset<T, produtoDeleteArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Update one Produto.
     * @param {produtoUpdateArgs} args - Arguments to update one Produto.
     * @example
     * // Update one Produto
     * const produto = await prisma.produto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends produtoUpdateArgs>(
      args: SelectSubset<T, produtoUpdateArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Delete zero or more Produtos.
     * @param {produtoDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends produtoDeleteManyArgs>(
      args?: SelectSubset<T, produtoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends produtoUpdateManyArgs>(
      args: SelectSubset<T, produtoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Produto.
     * @param {produtoUpsertArgs} args - Arguments to update or create a Produto.
     * @example
     * // Update or create a Produto
     * const produto = await prisma.produto.upsert({
     *   create: {
     *     // ... data to create a Produto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produto we want to update
     *   }
     * })
    **/
    upsert<T extends produtoUpsertArgs>(
      args: SelectSubset<T, produtoUpsertArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Find one Produto that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {produtoFindUniqueOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends produtoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, produtoFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Find the first Produto that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoFindFirstOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends produtoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, produtoFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__produtoClient<produto>, Prisma__produtoClient<produtoGetPayload<T>>>

    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produto.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends produtoCountArgs>(
      args?: Subset<T, produtoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoAggregateArgs>(args: Subset<T, ProdutoAggregateArgs>): PrismaPromise<GetProdutoAggregateType<T>>

    /**
     * Group by Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for produto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__produtoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * produto base type for findUnique actions
   */
  export type produtoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Filter, which produto to fetch.
     * 
    **/
    where: produtoWhereUniqueInput
  }

  /**
   * produto: findUnique
   */
  export interface produtoFindUniqueArgs extends produtoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * produto base type for findFirst actions
   */
  export type produtoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Filter, which produto to fetch.
     * 
    **/
    where?: produtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<produtoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for produtos.
     * 
    **/
    cursor?: produtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of produtos.
     * 
    **/
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }

  /**
   * produto: findFirst
   */
  export interface produtoFindFirstArgs extends produtoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * produto findMany
   */
  export type produtoFindManyArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Filter, which produtos to fetch.
     * 
    **/
    where?: produtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
     * 
    **/
    orderBy?: Enumerable<produtoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing produtos.
     * 
    **/
    cursor?: produtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProdutoScalarFieldEnum>
  }


  /**
   * produto create
   */
  export type produtoCreateArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * The data needed to create a produto.
     * 
    **/
    data: XOR<produtoCreateInput, produtoUncheckedCreateInput>
  }


  /**
   * produto createMany
   */
  export type produtoCreateManyArgs = {
    /**
     * The data used to create many produtos.
     * 
    **/
    data: Enumerable<produtoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * produto update
   */
  export type produtoUpdateArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * The data needed to update a produto.
     * 
    **/
    data: XOR<produtoUpdateInput, produtoUncheckedUpdateInput>
    /**
     * Choose, which produto to update.
     * 
    **/
    where: produtoWhereUniqueInput
  }


  /**
   * produto updateMany
   */
  export type produtoUpdateManyArgs = {
    /**
     * The data used to update produtos.
     * 
    **/
    data: XOR<produtoUpdateManyMutationInput, produtoUncheckedUpdateManyInput>
    /**
     * Filter which produtos to update
     * 
    **/
    where?: produtoWhereInput
  }


  /**
   * produto upsert
   */
  export type produtoUpsertArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * The filter to search for the produto to update in case it exists.
     * 
    **/
    where: produtoWhereUniqueInput
    /**
     * In case the produto found by the `where` argument doesn't exist, create a new produto with this data.
     * 
    **/
    create: XOR<produtoCreateInput, produtoUncheckedCreateInput>
    /**
     * In case the produto was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<produtoUpdateInput, produtoUncheckedUpdateInput>
  }


  /**
   * produto delete
   */
  export type produtoDeleteArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
    /**
     * Filter which produto to delete.
     * 
    **/
    where: produtoWhereUniqueInput
  }


  /**
   * produto deleteMany
   */
  export type produtoDeleteManyArgs = {
    /**
     * Filter which produtos to delete
     * 
    **/
    where?: produtoWhereInput
  }


  /**
   * produto: findUniqueOrThrow
   */
  export type produtoFindUniqueOrThrowArgs = produtoFindUniqueArgsBase
      

  /**
   * produto: findFirstOrThrow
   */
  export type produtoFindFirstOrThrowArgs = produtoFindFirstArgsBase
      

  /**
   * produto without action
   */
  export type produtoArgs = {
    /**
     * Select specific fields to fetch from the produto
     * 
    **/
    select?: produtoSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ClientesScalarFieldEnum: {
    codcliente: 'codcliente',
    codgrupo: 'codgrupo',
    codhorarioatendimento: 'codhorarioatendimento',
    cnpj_cpf: 'cnpj_cpf',
    datacadastro: 'datacadastro',
    OK: 'OK',
    razaosocial: 'razaosocial',
    fantasia: 'fantasia',
    ipexterno: 'ipexterno',
    dataatualizacaoip: 'dataatualizacaoip',
    bloqueado: 'bloqueado',
    diasderenovacao: 'diasderenovacao',
    vencimento: 'vencimento',
    checaratualizacao: 'checaratualizacao',
    OBSERVACAO: 'OBSERVACAO',
    QTDMAXPC: 'QTDMAXPC',
    SITUACAO_CADASTRO: 'SITUACAO_CADASTRO',
    EMAIL: 'EMAIL',
    VERSAO: 'VERSAO',
    PROMESSA_DE_PAGAMENTO: 'PROMESSA_DE_PAGAMENTO',
    DATA_INICIO_PROMESSA: 'DATA_INICIO_PROMESSA',
    DATA_LIMITE: 'DATA_LIMITE',
    TEMPOATENDIMENTO: 'TEMPOATENDIMENTO',
    TIPOATENDIMENTO: 'TIPOATENDIMENTO',
    VersaoNFe: 'VersaoNFe',
    VersaoNFCe: 'VersaoNFCe',
    SSLType: 'SSLType'
  };

  export type ClientesScalarFieldEnum = (typeof ClientesScalarFieldEnum)[keyof typeof ClientesScalarFieldEnum]


  export const ClientesgrupoScalarFieldEnum: {
    codgrupo: 'codgrupo',
    nomegrupo: 'nomegrupo'
  };

  export type ClientesgrupoScalarFieldEnum = (typeof ClientesgrupoScalarFieldEnum)[keyof typeof ClientesgrupoScalarFieldEnum]


  export const ClienteshorarioatendimentoScalarFieldEnum: {
    codatendimento: 'codatendimento',
    dhinicio: 'dhinicio',
    dhfim: 'dhfim'
  };

  export type ClienteshorarioatendimentoScalarFieldEnum = (typeof ClienteshorarioatendimentoScalarFieldEnum)[keyof typeof ClienteshorarioatendimentoScalarFieldEnum]


  export const ProdutoScalarFieldEnum: {
    codproduto: 'codproduto',
    codgrupo: 'codgrupo',
    codbarra: 'codbarra',
    descricao: 'descricao',
    precovenda: 'precovenda',
    observacao: 'observacao',
    nome: 'nome'
  };

  export type ProdutoScalarFieldEnum = (typeof ProdutoScalarFieldEnum)[keyof typeof ProdutoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type clientesWhereInput = {
    AND?: Enumerable<clientesWhereInput>
    OR?: Enumerable<clientesWhereInput>
    NOT?: Enumerable<clientesWhereInput>
    codcliente?: IntFilter | number
    codgrupo?: IntFilter | number
    grupo?: XOR<ClientesgrupoRelationFilter, clientesgrupoWhereInput>
    codhorarioatendimento?: IntNullableFilter | number | null
    cnpj_cpf?: StringNullableFilter | string | null
    datacadastro?: DateTimeNullableFilter | Date | string | null
    OK?: StringNullableFilter | string | null
    razaosocial?: StringNullableFilter | string | null
    fantasia?: StringNullableFilter | string | null
    ipexterno?: StringNullableFilter | string | null
    dataatualizacaoip?: DateTimeNullableFilter | Date | string | null
    bloqueado?: StringNullableFilter | string | null
    diasderenovacao?: IntNullableFilter | number | null
    vencimento?: IntNullableFilter | number | null
    checaratualizacao?: StringNullableFilter | string | null
    OBSERVACAO?: StringNullableFilter | string | null
    QTDMAXPC?: IntNullableFilter | number | null
    SITUACAO_CADASTRO?: StringNullableFilter | string | null
    EMAIL?: StringNullableFilter | string | null
    VERSAO?: StringNullableFilter | string | null
    PROMESSA_DE_PAGAMENTO?: StringNullableFilter | string | null
    DATA_INICIO_PROMESSA?: DateTimeNullableFilter | Date | string | null
    DATA_LIMITE?: DateTimeNullableFilter | Date | string | null
    TEMPOATENDIMENTO?: StringNullableFilter | string | null
    TIPOATENDIMENTO?: StringNullableFilter | string | null
    VersaoNFe?: StringNullableFilter | string | null
    VersaoNFCe?: StringNullableFilter | string | null
    SSLType?: IntNullableFilter | number | null
  }

  export type clientesOrderByWithRelationInput = {
    codcliente?: SortOrder
    codgrupo?: SortOrder
    grupo?: clientesgrupoOrderByWithRelationInput
    codhorarioatendimento?: SortOrder
    cnpj_cpf?: SortOrder
    datacadastro?: SortOrder
    OK?: SortOrder
    razaosocial?: SortOrder
    fantasia?: SortOrder
    ipexterno?: SortOrder
    dataatualizacaoip?: SortOrder
    bloqueado?: SortOrder
    diasderenovacao?: SortOrder
    vencimento?: SortOrder
    checaratualizacao?: SortOrder
    OBSERVACAO?: SortOrder
    QTDMAXPC?: SortOrder
    SITUACAO_CADASTRO?: SortOrder
    EMAIL?: SortOrder
    VERSAO?: SortOrder
    PROMESSA_DE_PAGAMENTO?: SortOrder
    DATA_INICIO_PROMESSA?: SortOrder
    DATA_LIMITE?: SortOrder
    TEMPOATENDIMENTO?: SortOrder
    TIPOATENDIMENTO?: SortOrder
    VersaoNFe?: SortOrder
    VersaoNFCe?: SortOrder
    SSLType?: SortOrder
  }

  export type clientesWhereUniqueInput = {
    codcliente?: number
  }

  export type clientesOrderByWithAggregationInput = {
    codcliente?: SortOrder
    codgrupo?: SortOrder
    codhorarioatendimento?: SortOrder
    cnpj_cpf?: SortOrder
    datacadastro?: SortOrder
    OK?: SortOrder
    razaosocial?: SortOrder
    fantasia?: SortOrder
    ipexterno?: SortOrder
    dataatualizacaoip?: SortOrder
    bloqueado?: SortOrder
    diasderenovacao?: SortOrder
    vencimento?: SortOrder
    checaratualizacao?: SortOrder
    OBSERVACAO?: SortOrder
    QTDMAXPC?: SortOrder
    SITUACAO_CADASTRO?: SortOrder
    EMAIL?: SortOrder
    VERSAO?: SortOrder
    PROMESSA_DE_PAGAMENTO?: SortOrder
    DATA_INICIO_PROMESSA?: SortOrder
    DATA_LIMITE?: SortOrder
    TEMPOATENDIMENTO?: SortOrder
    TIPOATENDIMENTO?: SortOrder
    VersaoNFe?: SortOrder
    VersaoNFCe?: SortOrder
    SSLType?: SortOrder
    _count?: clientesCountOrderByAggregateInput
    _avg?: clientesAvgOrderByAggregateInput
    _max?: clientesMaxOrderByAggregateInput
    _min?: clientesMinOrderByAggregateInput
    _sum?: clientesSumOrderByAggregateInput
  }

  export type clientesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<clientesScalarWhereWithAggregatesInput>
    OR?: Enumerable<clientesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<clientesScalarWhereWithAggregatesInput>
    codcliente?: IntWithAggregatesFilter | number
    codgrupo?: IntWithAggregatesFilter | number
    codhorarioatendimento?: IntNullableWithAggregatesFilter | number | null
    cnpj_cpf?: StringNullableWithAggregatesFilter | string | null
    datacadastro?: DateTimeNullableWithAggregatesFilter | Date | string | null
    OK?: StringNullableWithAggregatesFilter | string | null
    razaosocial?: StringNullableWithAggregatesFilter | string | null
    fantasia?: StringNullableWithAggregatesFilter | string | null
    ipexterno?: StringNullableWithAggregatesFilter | string | null
    dataatualizacaoip?: DateTimeNullableWithAggregatesFilter | Date | string | null
    bloqueado?: StringNullableWithAggregatesFilter | string | null
    diasderenovacao?: IntNullableWithAggregatesFilter | number | null
    vencimento?: IntNullableWithAggregatesFilter | number | null
    checaratualizacao?: StringNullableWithAggregatesFilter | string | null
    OBSERVACAO?: StringNullableWithAggregatesFilter | string | null
    QTDMAXPC?: IntNullableWithAggregatesFilter | number | null
    SITUACAO_CADASTRO?: StringNullableWithAggregatesFilter | string | null
    EMAIL?: StringNullableWithAggregatesFilter | string | null
    VERSAO?: StringNullableWithAggregatesFilter | string | null
    PROMESSA_DE_PAGAMENTO?: StringNullableWithAggregatesFilter | string | null
    DATA_INICIO_PROMESSA?: DateTimeNullableWithAggregatesFilter | Date | string | null
    DATA_LIMITE?: DateTimeNullableWithAggregatesFilter | Date | string | null
    TEMPOATENDIMENTO?: StringNullableWithAggregatesFilter | string | null
    TIPOATENDIMENTO?: StringNullableWithAggregatesFilter | string | null
    VersaoNFe?: StringNullableWithAggregatesFilter | string | null
    VersaoNFCe?: StringNullableWithAggregatesFilter | string | null
    SSLType?: IntNullableWithAggregatesFilter | number | null
  }

  export type clientesgrupoWhereInput = {
    AND?: Enumerable<clientesgrupoWhereInput>
    OR?: Enumerable<clientesgrupoWhereInput>
    NOT?: Enumerable<clientesgrupoWhereInput>
    codgrupo?: IntFilter | number
    nomegrupo?: StringFilter | string
    clientes?: ClientesListRelationFilter
  }

  export type clientesgrupoOrderByWithRelationInput = {
    codgrupo?: SortOrder
    nomegrupo?: SortOrder
    clientes?: clientesOrderByRelationAggregateInput
  }

  export type clientesgrupoWhereUniqueInput = {
    codgrupo?: number
  }

  export type clientesgrupoOrderByWithAggregationInput = {
    codgrupo?: SortOrder
    nomegrupo?: SortOrder
    _count?: clientesgrupoCountOrderByAggregateInput
    _avg?: clientesgrupoAvgOrderByAggregateInput
    _max?: clientesgrupoMaxOrderByAggregateInput
    _min?: clientesgrupoMinOrderByAggregateInput
    _sum?: clientesgrupoSumOrderByAggregateInput
  }

  export type clientesgrupoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<clientesgrupoScalarWhereWithAggregatesInput>
    OR?: Enumerable<clientesgrupoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<clientesgrupoScalarWhereWithAggregatesInput>
    codgrupo?: IntWithAggregatesFilter | number
    nomegrupo?: StringWithAggregatesFilter | string
  }

  export type clienteshorarioatendimentoWhereInput = {
    AND?: Enumerable<clienteshorarioatendimentoWhereInput>
    OR?: Enumerable<clienteshorarioatendimentoWhereInput>
    NOT?: Enumerable<clienteshorarioatendimentoWhereInput>
    codatendimento?: IntFilter | number
    dhinicio?: StringNullableFilter | string | null
    dhfim?: StringNullableFilter | string | null
  }

  export type clienteshorarioatendimentoOrderByWithRelationInput = {
    codatendimento?: SortOrder
    dhinicio?: SortOrder
    dhfim?: SortOrder
  }

  export type clienteshorarioatendimentoWhereUniqueInput = {
    codatendimento?: number
  }

  export type clienteshorarioatendimentoOrderByWithAggregationInput = {
    codatendimento?: SortOrder
    dhinicio?: SortOrder
    dhfim?: SortOrder
    _count?: clienteshorarioatendimentoCountOrderByAggregateInput
    _avg?: clienteshorarioatendimentoAvgOrderByAggregateInput
    _max?: clienteshorarioatendimentoMaxOrderByAggregateInput
    _min?: clienteshorarioatendimentoMinOrderByAggregateInput
    _sum?: clienteshorarioatendimentoSumOrderByAggregateInput
  }

  export type clienteshorarioatendimentoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<clienteshorarioatendimentoScalarWhereWithAggregatesInput>
    OR?: Enumerable<clienteshorarioatendimentoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<clienteshorarioatendimentoScalarWhereWithAggregatesInput>
    codatendimento?: IntWithAggregatesFilter | number
    dhinicio?: StringNullableWithAggregatesFilter | string | null
    dhfim?: StringNullableWithAggregatesFilter | string | null
  }

  export type produtoWhereInput = {
    AND?: Enumerable<produtoWhereInput>
    OR?: Enumerable<produtoWhereInput>
    NOT?: Enumerable<produtoWhereInput>
    codproduto?: IntFilter | number
    codgrupo?: IntNullableFilter | number | null
    codbarra?: StringNullableFilter | string | null
    descricao?: StringNullableFilter | string | null
    precovenda?: FloatNullableFilter | number | null
    observacao?: StringNullableFilter | string | null
    nome?: StringNullableFilter | string | null
  }

  export type produtoOrderByWithRelationInput = {
    codproduto?: SortOrder
    codgrupo?: SortOrder
    codbarra?: SortOrder
    descricao?: SortOrder
    precovenda?: SortOrder
    observacao?: SortOrder
    nome?: SortOrder
  }

  export type produtoWhereUniqueInput = {
    codproduto?: number
  }

  export type produtoOrderByWithAggregationInput = {
    codproduto?: SortOrder
    codgrupo?: SortOrder
    codbarra?: SortOrder
    descricao?: SortOrder
    precovenda?: SortOrder
    observacao?: SortOrder
    nome?: SortOrder
    _count?: produtoCountOrderByAggregateInput
    _avg?: produtoAvgOrderByAggregateInput
    _max?: produtoMaxOrderByAggregateInput
    _min?: produtoMinOrderByAggregateInput
    _sum?: produtoSumOrderByAggregateInput
  }

  export type produtoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<produtoScalarWhereWithAggregatesInput>
    OR?: Enumerable<produtoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<produtoScalarWhereWithAggregatesInput>
    codproduto?: IntWithAggregatesFilter | number
    codgrupo?: IntNullableWithAggregatesFilter | number | null
    codbarra?: StringNullableWithAggregatesFilter | string | null
    descricao?: StringNullableWithAggregatesFilter | string | null
    precovenda?: FloatNullableWithAggregatesFilter | number | null
    observacao?: StringNullableWithAggregatesFilter | string | null
    nome?: StringNullableWithAggregatesFilter | string | null
  }

  export type clientesCreateInput = {
    grupo: clientesgrupoCreateNestedOneWithoutClientesInput
    codhorarioatendimento?: number | null
    cnpj_cpf?: string | null
    datacadastro?: Date | string | null
    OK?: string | null
    razaosocial?: string | null
    fantasia?: string | null
    ipexterno?: string | null
    dataatualizacaoip?: Date | string | null
    bloqueado?: string | null
    diasderenovacao?: number | null
    vencimento?: number | null
    checaratualizacao?: string | null
    OBSERVACAO?: string | null
    QTDMAXPC?: number | null
    SITUACAO_CADASTRO?: string | null
    EMAIL?: string | null
    VERSAO?: string | null
    PROMESSA_DE_PAGAMENTO?: string | null
    DATA_INICIO_PROMESSA?: Date | string | null
    DATA_LIMITE?: Date | string | null
    TEMPOATENDIMENTO?: string | null
    TIPOATENDIMENTO?: string | null
    VersaoNFe?: string | null
    VersaoNFCe?: string | null
    SSLType?: number | null
  }

  export type clientesUncheckedCreateInput = {
    codcliente?: number
    codgrupo: number
    codhorarioatendimento?: number | null
    cnpj_cpf?: string | null
    datacadastro?: Date | string | null
    OK?: string | null
    razaosocial?: string | null
    fantasia?: string | null
    ipexterno?: string | null
    dataatualizacaoip?: Date | string | null
    bloqueado?: string | null
    diasderenovacao?: number | null
    vencimento?: number | null
    checaratualizacao?: string | null
    OBSERVACAO?: string | null
    QTDMAXPC?: number | null
    SITUACAO_CADASTRO?: string | null
    EMAIL?: string | null
    VERSAO?: string | null
    PROMESSA_DE_PAGAMENTO?: string | null
    DATA_INICIO_PROMESSA?: Date | string | null
    DATA_LIMITE?: Date | string | null
    TEMPOATENDIMENTO?: string | null
    TIPOATENDIMENTO?: string | null
    VersaoNFe?: string | null
    VersaoNFCe?: string | null
    SSLType?: number | null
  }

  export type clientesUpdateInput = {
    grupo?: clientesgrupoUpdateOneRequiredWithoutClientesNestedInput
    codhorarioatendimento?: NullableIntFieldUpdateOperationsInput | number | null
    cnpj_cpf?: NullableStringFieldUpdateOperationsInput | string | null
    datacadastro?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    OK?: NullableStringFieldUpdateOperationsInput | string | null
    razaosocial?: NullableStringFieldUpdateOperationsInput | string | null
    fantasia?: NullableStringFieldUpdateOperationsInput | string | null
    ipexterno?: NullableStringFieldUpdateOperationsInput | string | null
    dataatualizacaoip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloqueado?: NullableStringFieldUpdateOperationsInput | string | null
    diasderenovacao?: NullableIntFieldUpdateOperationsInput | number | null
    vencimento?: NullableIntFieldUpdateOperationsInput | number | null
    checaratualizacao?: NullableStringFieldUpdateOperationsInput | string | null
    OBSERVACAO?: NullableStringFieldUpdateOperationsInput | string | null
    QTDMAXPC?: NullableIntFieldUpdateOperationsInput | number | null
    SITUACAO_CADASTRO?: NullableStringFieldUpdateOperationsInput | string | null
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    VERSAO?: NullableStringFieldUpdateOperationsInput | string | null
    PROMESSA_DE_PAGAMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    DATA_INICIO_PROMESSA?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DATA_LIMITE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TEMPOATENDIMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    TIPOATENDIMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    VersaoNFe?: NullableStringFieldUpdateOperationsInput | string | null
    VersaoNFCe?: NullableStringFieldUpdateOperationsInput | string | null
    SSLType?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clientesUncheckedUpdateInput = {
    codcliente?: IntFieldUpdateOperationsInput | number
    codgrupo?: IntFieldUpdateOperationsInput | number
    codhorarioatendimento?: NullableIntFieldUpdateOperationsInput | number | null
    cnpj_cpf?: NullableStringFieldUpdateOperationsInput | string | null
    datacadastro?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    OK?: NullableStringFieldUpdateOperationsInput | string | null
    razaosocial?: NullableStringFieldUpdateOperationsInput | string | null
    fantasia?: NullableStringFieldUpdateOperationsInput | string | null
    ipexterno?: NullableStringFieldUpdateOperationsInput | string | null
    dataatualizacaoip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloqueado?: NullableStringFieldUpdateOperationsInput | string | null
    diasderenovacao?: NullableIntFieldUpdateOperationsInput | number | null
    vencimento?: NullableIntFieldUpdateOperationsInput | number | null
    checaratualizacao?: NullableStringFieldUpdateOperationsInput | string | null
    OBSERVACAO?: NullableStringFieldUpdateOperationsInput | string | null
    QTDMAXPC?: NullableIntFieldUpdateOperationsInput | number | null
    SITUACAO_CADASTRO?: NullableStringFieldUpdateOperationsInput | string | null
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    VERSAO?: NullableStringFieldUpdateOperationsInput | string | null
    PROMESSA_DE_PAGAMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    DATA_INICIO_PROMESSA?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DATA_LIMITE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TEMPOATENDIMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    TIPOATENDIMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    VersaoNFe?: NullableStringFieldUpdateOperationsInput | string | null
    VersaoNFCe?: NullableStringFieldUpdateOperationsInput | string | null
    SSLType?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clientesCreateManyInput = {
    codcliente?: number
    codgrupo: number
    codhorarioatendimento?: number | null
    cnpj_cpf?: string | null
    datacadastro?: Date | string | null
    OK?: string | null
    razaosocial?: string | null
    fantasia?: string | null
    ipexterno?: string | null
    dataatualizacaoip?: Date | string | null
    bloqueado?: string | null
    diasderenovacao?: number | null
    vencimento?: number | null
    checaratualizacao?: string | null
    OBSERVACAO?: string | null
    QTDMAXPC?: number | null
    SITUACAO_CADASTRO?: string | null
    EMAIL?: string | null
    VERSAO?: string | null
    PROMESSA_DE_PAGAMENTO?: string | null
    DATA_INICIO_PROMESSA?: Date | string | null
    DATA_LIMITE?: Date | string | null
    TEMPOATENDIMENTO?: string | null
    TIPOATENDIMENTO?: string | null
    VersaoNFe?: string | null
    VersaoNFCe?: string | null
    SSLType?: number | null
  }

  export type clientesUpdateManyMutationInput = {
    codhorarioatendimento?: NullableIntFieldUpdateOperationsInput | number | null
    cnpj_cpf?: NullableStringFieldUpdateOperationsInput | string | null
    datacadastro?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    OK?: NullableStringFieldUpdateOperationsInput | string | null
    razaosocial?: NullableStringFieldUpdateOperationsInput | string | null
    fantasia?: NullableStringFieldUpdateOperationsInput | string | null
    ipexterno?: NullableStringFieldUpdateOperationsInput | string | null
    dataatualizacaoip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloqueado?: NullableStringFieldUpdateOperationsInput | string | null
    diasderenovacao?: NullableIntFieldUpdateOperationsInput | number | null
    vencimento?: NullableIntFieldUpdateOperationsInput | number | null
    checaratualizacao?: NullableStringFieldUpdateOperationsInput | string | null
    OBSERVACAO?: NullableStringFieldUpdateOperationsInput | string | null
    QTDMAXPC?: NullableIntFieldUpdateOperationsInput | number | null
    SITUACAO_CADASTRO?: NullableStringFieldUpdateOperationsInput | string | null
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    VERSAO?: NullableStringFieldUpdateOperationsInput | string | null
    PROMESSA_DE_PAGAMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    DATA_INICIO_PROMESSA?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DATA_LIMITE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TEMPOATENDIMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    TIPOATENDIMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    VersaoNFe?: NullableStringFieldUpdateOperationsInput | string | null
    VersaoNFCe?: NullableStringFieldUpdateOperationsInput | string | null
    SSLType?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clientesUncheckedUpdateManyInput = {
    codcliente?: IntFieldUpdateOperationsInput | number
    codgrupo?: IntFieldUpdateOperationsInput | number
    codhorarioatendimento?: NullableIntFieldUpdateOperationsInput | number | null
    cnpj_cpf?: NullableStringFieldUpdateOperationsInput | string | null
    datacadastro?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    OK?: NullableStringFieldUpdateOperationsInput | string | null
    razaosocial?: NullableStringFieldUpdateOperationsInput | string | null
    fantasia?: NullableStringFieldUpdateOperationsInput | string | null
    ipexterno?: NullableStringFieldUpdateOperationsInput | string | null
    dataatualizacaoip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloqueado?: NullableStringFieldUpdateOperationsInput | string | null
    diasderenovacao?: NullableIntFieldUpdateOperationsInput | number | null
    vencimento?: NullableIntFieldUpdateOperationsInput | number | null
    checaratualizacao?: NullableStringFieldUpdateOperationsInput | string | null
    OBSERVACAO?: NullableStringFieldUpdateOperationsInput | string | null
    QTDMAXPC?: NullableIntFieldUpdateOperationsInput | number | null
    SITUACAO_CADASTRO?: NullableStringFieldUpdateOperationsInput | string | null
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    VERSAO?: NullableStringFieldUpdateOperationsInput | string | null
    PROMESSA_DE_PAGAMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    DATA_INICIO_PROMESSA?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DATA_LIMITE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TEMPOATENDIMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    TIPOATENDIMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    VersaoNFe?: NullableStringFieldUpdateOperationsInput | string | null
    VersaoNFCe?: NullableStringFieldUpdateOperationsInput | string | null
    SSLType?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clientesgrupoCreateInput = {
    nomegrupo?: string
    clientes?: clientesCreateNestedManyWithoutGrupoInput
  }

  export type clientesgrupoUncheckedCreateInput = {
    codgrupo?: number
    nomegrupo?: string
    clientes?: clientesUncheckedCreateNestedManyWithoutGrupoInput
  }

  export type clientesgrupoUpdateInput = {
    nomegrupo?: StringFieldUpdateOperationsInput | string
    clientes?: clientesUpdateManyWithoutGrupoNestedInput
  }

  export type clientesgrupoUncheckedUpdateInput = {
    codgrupo?: IntFieldUpdateOperationsInput | number
    nomegrupo?: StringFieldUpdateOperationsInput | string
    clientes?: clientesUncheckedUpdateManyWithoutGrupoNestedInput
  }

  export type clientesgrupoCreateManyInput = {
    codgrupo?: number
    nomegrupo?: string
  }

  export type clientesgrupoUpdateManyMutationInput = {
    nomegrupo?: StringFieldUpdateOperationsInput | string
  }

  export type clientesgrupoUncheckedUpdateManyInput = {
    codgrupo?: IntFieldUpdateOperationsInput | number
    nomegrupo?: StringFieldUpdateOperationsInput | string
  }

  export type clienteshorarioatendimentoCreateInput = {
    dhinicio?: string | null
    dhfim?: string | null
  }

  export type clienteshorarioatendimentoUncheckedCreateInput = {
    codatendimento?: number
    dhinicio?: string | null
    dhfim?: string | null
  }

  export type clienteshorarioatendimentoUpdateInput = {
    dhinicio?: NullableStringFieldUpdateOperationsInput | string | null
    dhfim?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type clienteshorarioatendimentoUncheckedUpdateInput = {
    codatendimento?: IntFieldUpdateOperationsInput | number
    dhinicio?: NullableStringFieldUpdateOperationsInput | string | null
    dhfim?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type clienteshorarioatendimentoCreateManyInput = {
    codatendimento?: number
    dhinicio?: string | null
    dhfim?: string | null
  }

  export type clienteshorarioatendimentoUpdateManyMutationInput = {
    dhinicio?: NullableStringFieldUpdateOperationsInput | string | null
    dhfim?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type clienteshorarioatendimentoUncheckedUpdateManyInput = {
    codatendimento?: IntFieldUpdateOperationsInput | number
    dhinicio?: NullableStringFieldUpdateOperationsInput | string | null
    dhfim?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type produtoCreateInput = {
    codgrupo?: number | null
    codbarra?: string | null
    descricao?: string | null
    precovenda?: number | null
    observacao?: string | null
    nome?: string | null
  }

  export type produtoUncheckedCreateInput = {
    codproduto?: number
    codgrupo?: number | null
    codbarra?: string | null
    descricao?: string | null
    precovenda?: number | null
    observacao?: string | null
    nome?: string | null
  }

  export type produtoUpdateInput = {
    codgrupo?: NullableIntFieldUpdateOperationsInput | number | null
    codbarra?: NullableStringFieldUpdateOperationsInput | string | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    precovenda?: NullableFloatFieldUpdateOperationsInput | number | null
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type produtoUncheckedUpdateInput = {
    codproduto?: IntFieldUpdateOperationsInput | number
    codgrupo?: NullableIntFieldUpdateOperationsInput | number | null
    codbarra?: NullableStringFieldUpdateOperationsInput | string | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    precovenda?: NullableFloatFieldUpdateOperationsInput | number | null
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type produtoCreateManyInput = {
    codproduto?: number
    codgrupo?: number | null
    codbarra?: string | null
    descricao?: string | null
    precovenda?: number | null
    observacao?: string | null
    nome?: string | null
  }

  export type produtoUpdateManyMutationInput = {
    codgrupo?: NullableIntFieldUpdateOperationsInput | number | null
    codbarra?: NullableStringFieldUpdateOperationsInput | string | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    precovenda?: NullableFloatFieldUpdateOperationsInput | number | null
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type produtoUncheckedUpdateManyInput = {
    codproduto?: IntFieldUpdateOperationsInput | number
    codgrupo?: NullableIntFieldUpdateOperationsInput | number | null
    codbarra?: NullableStringFieldUpdateOperationsInput | string | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    precovenda?: NullableFloatFieldUpdateOperationsInput | number | null
    observacao?: NullableStringFieldUpdateOperationsInput | string | null
    nome?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type ClientesgrupoRelationFilter = {
    is?: clientesgrupoWhereInput
    isNot?: clientesgrupoWhereInput
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type clientesCountOrderByAggregateInput = {
    codcliente?: SortOrder
    codgrupo?: SortOrder
    codhorarioatendimento?: SortOrder
    cnpj_cpf?: SortOrder
    datacadastro?: SortOrder
    OK?: SortOrder
    razaosocial?: SortOrder
    fantasia?: SortOrder
    ipexterno?: SortOrder
    dataatualizacaoip?: SortOrder
    bloqueado?: SortOrder
    diasderenovacao?: SortOrder
    vencimento?: SortOrder
    checaratualizacao?: SortOrder
    OBSERVACAO?: SortOrder
    QTDMAXPC?: SortOrder
    SITUACAO_CADASTRO?: SortOrder
    EMAIL?: SortOrder
    VERSAO?: SortOrder
    PROMESSA_DE_PAGAMENTO?: SortOrder
    DATA_INICIO_PROMESSA?: SortOrder
    DATA_LIMITE?: SortOrder
    TEMPOATENDIMENTO?: SortOrder
    TIPOATENDIMENTO?: SortOrder
    VersaoNFe?: SortOrder
    VersaoNFCe?: SortOrder
    SSLType?: SortOrder
  }

  export type clientesAvgOrderByAggregateInput = {
    codcliente?: SortOrder
    codgrupo?: SortOrder
    codhorarioatendimento?: SortOrder
    diasderenovacao?: SortOrder
    vencimento?: SortOrder
    QTDMAXPC?: SortOrder
    SSLType?: SortOrder
  }

  export type clientesMaxOrderByAggregateInput = {
    codcliente?: SortOrder
    codgrupo?: SortOrder
    codhorarioatendimento?: SortOrder
    cnpj_cpf?: SortOrder
    datacadastro?: SortOrder
    OK?: SortOrder
    razaosocial?: SortOrder
    fantasia?: SortOrder
    ipexterno?: SortOrder
    dataatualizacaoip?: SortOrder
    bloqueado?: SortOrder
    diasderenovacao?: SortOrder
    vencimento?: SortOrder
    checaratualizacao?: SortOrder
    OBSERVACAO?: SortOrder
    QTDMAXPC?: SortOrder
    SITUACAO_CADASTRO?: SortOrder
    EMAIL?: SortOrder
    VERSAO?: SortOrder
    PROMESSA_DE_PAGAMENTO?: SortOrder
    DATA_INICIO_PROMESSA?: SortOrder
    DATA_LIMITE?: SortOrder
    TEMPOATENDIMENTO?: SortOrder
    TIPOATENDIMENTO?: SortOrder
    VersaoNFe?: SortOrder
    VersaoNFCe?: SortOrder
    SSLType?: SortOrder
  }

  export type clientesMinOrderByAggregateInput = {
    codcliente?: SortOrder
    codgrupo?: SortOrder
    codhorarioatendimento?: SortOrder
    cnpj_cpf?: SortOrder
    datacadastro?: SortOrder
    OK?: SortOrder
    razaosocial?: SortOrder
    fantasia?: SortOrder
    ipexterno?: SortOrder
    dataatualizacaoip?: SortOrder
    bloqueado?: SortOrder
    diasderenovacao?: SortOrder
    vencimento?: SortOrder
    checaratualizacao?: SortOrder
    OBSERVACAO?: SortOrder
    QTDMAXPC?: SortOrder
    SITUACAO_CADASTRO?: SortOrder
    EMAIL?: SortOrder
    VERSAO?: SortOrder
    PROMESSA_DE_PAGAMENTO?: SortOrder
    DATA_INICIO_PROMESSA?: SortOrder
    DATA_LIMITE?: SortOrder
    TEMPOATENDIMENTO?: SortOrder
    TIPOATENDIMENTO?: SortOrder
    VersaoNFe?: SortOrder
    VersaoNFCe?: SortOrder
    SSLType?: SortOrder
  }

  export type clientesSumOrderByAggregateInput = {
    codcliente?: SortOrder
    codgrupo?: SortOrder
    codhorarioatendimento?: SortOrder
    diasderenovacao?: SortOrder
    vencimento?: SortOrder
    QTDMAXPC?: SortOrder
    SSLType?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type ClientesListRelationFilter = {
    every?: clientesWhereInput
    some?: clientesWhereInput
    none?: clientesWhereInput
  }

  export type clientesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type clientesgrupoCountOrderByAggregateInput = {
    codgrupo?: SortOrder
    nomegrupo?: SortOrder
  }

  export type clientesgrupoAvgOrderByAggregateInput = {
    codgrupo?: SortOrder
  }

  export type clientesgrupoMaxOrderByAggregateInput = {
    codgrupo?: SortOrder
    nomegrupo?: SortOrder
  }

  export type clientesgrupoMinOrderByAggregateInput = {
    codgrupo?: SortOrder
    nomegrupo?: SortOrder
  }

  export type clientesgrupoSumOrderByAggregateInput = {
    codgrupo?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type clienteshorarioatendimentoCountOrderByAggregateInput = {
    codatendimento?: SortOrder
    dhinicio?: SortOrder
    dhfim?: SortOrder
  }

  export type clienteshorarioatendimentoAvgOrderByAggregateInput = {
    codatendimento?: SortOrder
  }

  export type clienteshorarioatendimentoMaxOrderByAggregateInput = {
    codatendimento?: SortOrder
    dhinicio?: SortOrder
    dhfim?: SortOrder
  }

  export type clienteshorarioatendimentoMinOrderByAggregateInput = {
    codatendimento?: SortOrder
    dhinicio?: SortOrder
    dhfim?: SortOrder
  }

  export type clienteshorarioatendimentoSumOrderByAggregateInput = {
    codatendimento?: SortOrder
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type produtoCountOrderByAggregateInput = {
    codproduto?: SortOrder
    codgrupo?: SortOrder
    codbarra?: SortOrder
    descricao?: SortOrder
    precovenda?: SortOrder
    observacao?: SortOrder
    nome?: SortOrder
  }

  export type produtoAvgOrderByAggregateInput = {
    codproduto?: SortOrder
    codgrupo?: SortOrder
    precovenda?: SortOrder
  }

  export type produtoMaxOrderByAggregateInput = {
    codproduto?: SortOrder
    codgrupo?: SortOrder
    codbarra?: SortOrder
    descricao?: SortOrder
    precovenda?: SortOrder
    observacao?: SortOrder
    nome?: SortOrder
  }

  export type produtoMinOrderByAggregateInput = {
    codproduto?: SortOrder
    codgrupo?: SortOrder
    codbarra?: SortOrder
    descricao?: SortOrder
    precovenda?: SortOrder
    observacao?: SortOrder
    nome?: SortOrder
  }

  export type produtoSumOrderByAggregateInput = {
    codproduto?: SortOrder
    codgrupo?: SortOrder
    precovenda?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type clientesgrupoCreateNestedOneWithoutClientesInput = {
    create?: XOR<clientesgrupoCreateWithoutClientesInput, clientesgrupoUncheckedCreateWithoutClientesInput>
    connectOrCreate?: clientesgrupoCreateOrConnectWithoutClientesInput
    connect?: clientesgrupoWhereUniqueInput
  }

  export type clientesgrupoUpdateOneRequiredWithoutClientesNestedInput = {
    create?: XOR<clientesgrupoCreateWithoutClientesInput, clientesgrupoUncheckedCreateWithoutClientesInput>
    connectOrCreate?: clientesgrupoCreateOrConnectWithoutClientesInput
    upsert?: clientesgrupoUpsertWithoutClientesInput
    connect?: clientesgrupoWhereUniqueInput
    update?: XOR<clientesgrupoUpdateWithoutClientesInput, clientesgrupoUncheckedUpdateWithoutClientesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type clientesCreateNestedManyWithoutGrupoInput = {
    create?: XOR<Enumerable<clientesCreateWithoutGrupoInput>, Enumerable<clientesUncheckedCreateWithoutGrupoInput>>
    connectOrCreate?: Enumerable<clientesCreateOrConnectWithoutGrupoInput>
    createMany?: clientesCreateManyGrupoInputEnvelope
    connect?: Enumerable<clientesWhereUniqueInput>
  }

  export type clientesUncheckedCreateNestedManyWithoutGrupoInput = {
    create?: XOR<Enumerable<clientesCreateWithoutGrupoInput>, Enumerable<clientesUncheckedCreateWithoutGrupoInput>>
    connectOrCreate?: Enumerable<clientesCreateOrConnectWithoutGrupoInput>
    createMany?: clientesCreateManyGrupoInputEnvelope
    connect?: Enumerable<clientesWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type clientesUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<Enumerable<clientesCreateWithoutGrupoInput>, Enumerable<clientesUncheckedCreateWithoutGrupoInput>>
    connectOrCreate?: Enumerable<clientesCreateOrConnectWithoutGrupoInput>
    upsert?: Enumerable<clientesUpsertWithWhereUniqueWithoutGrupoInput>
    createMany?: clientesCreateManyGrupoInputEnvelope
    set?: Enumerable<clientesWhereUniqueInput>
    disconnect?: Enumerable<clientesWhereUniqueInput>
    delete?: Enumerable<clientesWhereUniqueInput>
    connect?: Enumerable<clientesWhereUniqueInput>
    update?: Enumerable<clientesUpdateWithWhereUniqueWithoutGrupoInput>
    updateMany?: Enumerable<clientesUpdateManyWithWhereWithoutGrupoInput>
    deleteMany?: Enumerable<clientesScalarWhereInput>
  }

  export type clientesUncheckedUpdateManyWithoutGrupoNestedInput = {
    create?: XOR<Enumerable<clientesCreateWithoutGrupoInput>, Enumerable<clientesUncheckedCreateWithoutGrupoInput>>
    connectOrCreate?: Enumerable<clientesCreateOrConnectWithoutGrupoInput>
    upsert?: Enumerable<clientesUpsertWithWhereUniqueWithoutGrupoInput>
    createMany?: clientesCreateManyGrupoInputEnvelope
    set?: Enumerable<clientesWhereUniqueInput>
    disconnect?: Enumerable<clientesWhereUniqueInput>
    delete?: Enumerable<clientesWhereUniqueInput>
    connect?: Enumerable<clientesWhereUniqueInput>
    update?: Enumerable<clientesUpdateWithWhereUniqueWithoutGrupoInput>
    updateMany?: Enumerable<clientesUpdateManyWithWhereWithoutGrupoInput>
    deleteMany?: Enumerable<clientesScalarWhereInput>
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type clientesgrupoCreateWithoutClientesInput = {
    nomegrupo?: string
  }

  export type clientesgrupoUncheckedCreateWithoutClientesInput = {
    codgrupo?: number
    nomegrupo?: string
  }

  export type clientesgrupoCreateOrConnectWithoutClientesInput = {
    where: clientesgrupoWhereUniqueInput
    create: XOR<clientesgrupoCreateWithoutClientesInput, clientesgrupoUncheckedCreateWithoutClientesInput>
  }

  export type clientesgrupoUpsertWithoutClientesInput = {
    update: XOR<clientesgrupoUpdateWithoutClientesInput, clientesgrupoUncheckedUpdateWithoutClientesInput>
    create: XOR<clientesgrupoCreateWithoutClientesInput, clientesgrupoUncheckedCreateWithoutClientesInput>
  }

  export type clientesgrupoUpdateWithoutClientesInput = {
    nomegrupo?: StringFieldUpdateOperationsInput | string
  }

  export type clientesgrupoUncheckedUpdateWithoutClientesInput = {
    codgrupo?: IntFieldUpdateOperationsInput | number
    nomegrupo?: StringFieldUpdateOperationsInput | string
  }

  export type clientesCreateWithoutGrupoInput = {
    codhorarioatendimento?: number | null
    cnpj_cpf?: string | null
    datacadastro?: Date | string | null
    OK?: string | null
    razaosocial?: string | null
    fantasia?: string | null
    ipexterno?: string | null
    dataatualizacaoip?: Date | string | null
    bloqueado?: string | null
    diasderenovacao?: number | null
    vencimento?: number | null
    checaratualizacao?: string | null
    OBSERVACAO?: string | null
    QTDMAXPC?: number | null
    SITUACAO_CADASTRO?: string | null
    EMAIL?: string | null
    VERSAO?: string | null
    PROMESSA_DE_PAGAMENTO?: string | null
    DATA_INICIO_PROMESSA?: Date | string | null
    DATA_LIMITE?: Date | string | null
    TEMPOATENDIMENTO?: string | null
    TIPOATENDIMENTO?: string | null
    VersaoNFe?: string | null
    VersaoNFCe?: string | null
    SSLType?: number | null
  }

  export type clientesUncheckedCreateWithoutGrupoInput = {
    codcliente?: number
    codhorarioatendimento?: number | null
    cnpj_cpf?: string | null
    datacadastro?: Date | string | null
    OK?: string | null
    razaosocial?: string | null
    fantasia?: string | null
    ipexterno?: string | null
    dataatualizacaoip?: Date | string | null
    bloqueado?: string | null
    diasderenovacao?: number | null
    vencimento?: number | null
    checaratualizacao?: string | null
    OBSERVACAO?: string | null
    QTDMAXPC?: number | null
    SITUACAO_CADASTRO?: string | null
    EMAIL?: string | null
    VERSAO?: string | null
    PROMESSA_DE_PAGAMENTO?: string | null
    DATA_INICIO_PROMESSA?: Date | string | null
    DATA_LIMITE?: Date | string | null
    TEMPOATENDIMENTO?: string | null
    TIPOATENDIMENTO?: string | null
    VersaoNFe?: string | null
    VersaoNFCe?: string | null
    SSLType?: number | null
  }

  export type clientesCreateOrConnectWithoutGrupoInput = {
    where: clientesWhereUniqueInput
    create: XOR<clientesCreateWithoutGrupoInput, clientesUncheckedCreateWithoutGrupoInput>
  }

  export type clientesCreateManyGrupoInputEnvelope = {
    data: Enumerable<clientesCreateManyGrupoInput>
    skipDuplicates?: boolean
  }

  export type clientesUpsertWithWhereUniqueWithoutGrupoInput = {
    where: clientesWhereUniqueInput
    update: XOR<clientesUpdateWithoutGrupoInput, clientesUncheckedUpdateWithoutGrupoInput>
    create: XOR<clientesCreateWithoutGrupoInput, clientesUncheckedCreateWithoutGrupoInput>
  }

  export type clientesUpdateWithWhereUniqueWithoutGrupoInput = {
    where: clientesWhereUniqueInput
    data: XOR<clientesUpdateWithoutGrupoInput, clientesUncheckedUpdateWithoutGrupoInput>
  }

  export type clientesUpdateManyWithWhereWithoutGrupoInput = {
    where: clientesScalarWhereInput
    data: XOR<clientesUpdateManyMutationInput, clientesUncheckedUpdateManyWithoutClientesInput>
  }

  export type clientesScalarWhereInput = {
    AND?: Enumerable<clientesScalarWhereInput>
    OR?: Enumerable<clientesScalarWhereInput>
    NOT?: Enumerable<clientesScalarWhereInput>
    codcliente?: IntFilter | number
    codgrupo?: IntFilter | number
    codhorarioatendimento?: IntNullableFilter | number | null
    cnpj_cpf?: StringNullableFilter | string | null
    datacadastro?: DateTimeNullableFilter | Date | string | null
    OK?: StringNullableFilter | string | null
    razaosocial?: StringNullableFilter | string | null
    fantasia?: StringNullableFilter | string | null
    ipexterno?: StringNullableFilter | string | null
    dataatualizacaoip?: DateTimeNullableFilter | Date | string | null
    bloqueado?: StringNullableFilter | string | null
    diasderenovacao?: IntNullableFilter | number | null
    vencimento?: IntNullableFilter | number | null
    checaratualizacao?: StringNullableFilter | string | null
    OBSERVACAO?: StringNullableFilter | string | null
    QTDMAXPC?: IntNullableFilter | number | null
    SITUACAO_CADASTRO?: StringNullableFilter | string | null
    EMAIL?: StringNullableFilter | string | null
    VERSAO?: StringNullableFilter | string | null
    PROMESSA_DE_PAGAMENTO?: StringNullableFilter | string | null
    DATA_INICIO_PROMESSA?: DateTimeNullableFilter | Date | string | null
    DATA_LIMITE?: DateTimeNullableFilter | Date | string | null
    TEMPOATENDIMENTO?: StringNullableFilter | string | null
    TIPOATENDIMENTO?: StringNullableFilter | string | null
    VersaoNFe?: StringNullableFilter | string | null
    VersaoNFCe?: StringNullableFilter | string | null
    SSLType?: IntNullableFilter | number | null
  }

  export type clientesCreateManyGrupoInput = {
    codcliente?: number
    codhorarioatendimento?: number | null
    cnpj_cpf?: string | null
    datacadastro?: Date | string | null
    OK?: string | null
    razaosocial?: string | null
    fantasia?: string | null
    ipexterno?: string | null
    dataatualizacaoip?: Date | string | null
    bloqueado?: string | null
    diasderenovacao?: number | null
    vencimento?: number | null
    checaratualizacao?: string | null
    OBSERVACAO?: string | null
    QTDMAXPC?: number | null
    SITUACAO_CADASTRO?: string | null
    EMAIL?: string | null
    VERSAO?: string | null
    PROMESSA_DE_PAGAMENTO?: string | null
    DATA_INICIO_PROMESSA?: Date | string | null
    DATA_LIMITE?: Date | string | null
    TEMPOATENDIMENTO?: string | null
    TIPOATENDIMENTO?: string | null
    VersaoNFe?: string | null
    VersaoNFCe?: string | null
    SSLType?: number | null
  }

  export type clientesUpdateWithoutGrupoInput = {
    codhorarioatendimento?: NullableIntFieldUpdateOperationsInput | number | null
    cnpj_cpf?: NullableStringFieldUpdateOperationsInput | string | null
    datacadastro?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    OK?: NullableStringFieldUpdateOperationsInput | string | null
    razaosocial?: NullableStringFieldUpdateOperationsInput | string | null
    fantasia?: NullableStringFieldUpdateOperationsInput | string | null
    ipexterno?: NullableStringFieldUpdateOperationsInput | string | null
    dataatualizacaoip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloqueado?: NullableStringFieldUpdateOperationsInput | string | null
    diasderenovacao?: NullableIntFieldUpdateOperationsInput | number | null
    vencimento?: NullableIntFieldUpdateOperationsInput | number | null
    checaratualizacao?: NullableStringFieldUpdateOperationsInput | string | null
    OBSERVACAO?: NullableStringFieldUpdateOperationsInput | string | null
    QTDMAXPC?: NullableIntFieldUpdateOperationsInput | number | null
    SITUACAO_CADASTRO?: NullableStringFieldUpdateOperationsInput | string | null
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    VERSAO?: NullableStringFieldUpdateOperationsInput | string | null
    PROMESSA_DE_PAGAMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    DATA_INICIO_PROMESSA?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DATA_LIMITE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TEMPOATENDIMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    TIPOATENDIMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    VersaoNFe?: NullableStringFieldUpdateOperationsInput | string | null
    VersaoNFCe?: NullableStringFieldUpdateOperationsInput | string | null
    SSLType?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clientesUncheckedUpdateWithoutGrupoInput = {
    codcliente?: IntFieldUpdateOperationsInput | number
    codhorarioatendimento?: NullableIntFieldUpdateOperationsInput | number | null
    cnpj_cpf?: NullableStringFieldUpdateOperationsInput | string | null
    datacadastro?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    OK?: NullableStringFieldUpdateOperationsInput | string | null
    razaosocial?: NullableStringFieldUpdateOperationsInput | string | null
    fantasia?: NullableStringFieldUpdateOperationsInput | string | null
    ipexterno?: NullableStringFieldUpdateOperationsInput | string | null
    dataatualizacaoip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloqueado?: NullableStringFieldUpdateOperationsInput | string | null
    diasderenovacao?: NullableIntFieldUpdateOperationsInput | number | null
    vencimento?: NullableIntFieldUpdateOperationsInput | number | null
    checaratualizacao?: NullableStringFieldUpdateOperationsInput | string | null
    OBSERVACAO?: NullableStringFieldUpdateOperationsInput | string | null
    QTDMAXPC?: NullableIntFieldUpdateOperationsInput | number | null
    SITUACAO_CADASTRO?: NullableStringFieldUpdateOperationsInput | string | null
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    VERSAO?: NullableStringFieldUpdateOperationsInput | string | null
    PROMESSA_DE_PAGAMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    DATA_INICIO_PROMESSA?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DATA_LIMITE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TEMPOATENDIMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    TIPOATENDIMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    VersaoNFe?: NullableStringFieldUpdateOperationsInput | string | null
    VersaoNFCe?: NullableStringFieldUpdateOperationsInput | string | null
    SSLType?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clientesUncheckedUpdateManyWithoutClientesInput = {
    codcliente?: IntFieldUpdateOperationsInput | number
    codhorarioatendimento?: NullableIntFieldUpdateOperationsInput | number | null
    cnpj_cpf?: NullableStringFieldUpdateOperationsInput | string | null
    datacadastro?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    OK?: NullableStringFieldUpdateOperationsInput | string | null
    razaosocial?: NullableStringFieldUpdateOperationsInput | string | null
    fantasia?: NullableStringFieldUpdateOperationsInput | string | null
    ipexterno?: NullableStringFieldUpdateOperationsInput | string | null
    dataatualizacaoip?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloqueado?: NullableStringFieldUpdateOperationsInput | string | null
    diasderenovacao?: NullableIntFieldUpdateOperationsInput | number | null
    vencimento?: NullableIntFieldUpdateOperationsInput | number | null
    checaratualizacao?: NullableStringFieldUpdateOperationsInput | string | null
    OBSERVACAO?: NullableStringFieldUpdateOperationsInput | string | null
    QTDMAXPC?: NullableIntFieldUpdateOperationsInput | number | null
    SITUACAO_CADASTRO?: NullableStringFieldUpdateOperationsInput | string | null
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    VERSAO?: NullableStringFieldUpdateOperationsInput | string | null
    PROMESSA_DE_PAGAMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    DATA_INICIO_PROMESSA?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    DATA_LIMITE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TEMPOATENDIMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    TIPOATENDIMENTO?: NullableStringFieldUpdateOperationsInput | string | null
    VersaoNFe?: NullableStringFieldUpdateOperationsInput | string | null
    VersaoNFCe?: NullableStringFieldUpdateOperationsInput | string | null
    SSLType?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}